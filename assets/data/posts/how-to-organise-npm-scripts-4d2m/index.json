{"hash":"ba9d5189706e467db237ab5338777de637ee1032","data":{"post":{"title":"How to organise NPM scripts in package.json?","content":"<p>I love using npm script as my build tool. By doing so, we could make sure the scripts are not sooooo complicated and easy to read (comparing to gulp/grunt in my opinion).</p>\n<p>But as the project grows larger, there are more and more scripts that are added to <code>package.json</code> and things become less and less maintainable.</p>\n<p>You probably tried adding empty lines in between scripts, but figure <code>npm install</code> will just remove your empty lines and leave you with only disappointment.</p>\n<p>Here is a little trick which allow us to, kind of, group our scripts into categories.</p>\n<!--beforebegin--><div class=\"language-javascript extra-class\"><!--afterbegin--><pre v-pre class=\"language-javascript\"><code><span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"test\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"nyc mocha --recursive\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"preversion\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"git checkout master &amp;&amp; git merge --squash dev &amp;&amp; npm test\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"git add -A\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"postversion\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"git push &amp;&amp; git push --tags &amp;&amp; git checkout -\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"\\n# TESTING SCRIPTS:\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"createTestPages\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"node ./scripts/createTestPages.js\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"test:watch\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"mocha --recursive --watch\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"coverage\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"nyc report --reporter=lcov > coverage.lcov &amp;&amp; codecov\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"lint:js\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"eslint .\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"\\n# HUSKY GIT HOOKS:\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"precommit\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"lint-staged\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>The trick here is to define some category keys. By adding <code>\\n</code> to the front of the key, we would get a pretty darn neat <code>npm run</code> result.</p>\n<!--beforebegin--><div class=\"language- extra-class\"><!--afterbegin--><pre v-pre class=\"language-text\"><code>&gt; npm run\nLifecycle scripts included in grab-lyrics:\n  test\n    nyc mocha --recursive\n  preversion\n    git checkout master &amp;&amp; git merge --squash dev &amp;&amp; npm test\n  version\n    git add -A\n  postversion\n    git push &amp;&amp; git push --tags &amp;&amp; git checkout -\n\navailable via `npm run-script`:\n  \n# TESTING SCRIPTS:\n    \n  createTestPages\n    node ./scripts/createTestPages.js\n  test:watch\n    mocha --recursive --watch\n  coverage\n    nyc report --reporter=lcov &gt; coverage.lcov &amp;&amp; codecov\n  lint:js\n    eslint .\n  \n# HUSKY GIT HOOKS:\n    \n  precommit\n    lint-staged\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>One thing to keep in mind is to always put NPM lifecycle hooks at the top of the script because NPM will just grab them and put them at the top.</p>\n<p>What do you think about this trick?</p>\n"}},"context":{}}