{"hash":"da9d46662bf147e3a7d9ab5338777de637ee1032","data":{"post":{"title":"How to `filter` without `is` in Typescript? the `flatMap` as `filter` technique","content":"<p>Typescript gives developers confidence in their code changes. The types help developers understand code better, refactor code easier etc. However, one of the pain points of typescript is the <code>is</code> keyword.</p>\n<h2 id=\"what-is-is\"><a class=\"header-anchor\" href=\"#what-is-is\">#</a> What is <code>is</code>?</h2>\n<p><code>is</code> is called a <a href=\"https://www.typescriptlang.org/docs/handbook/advanced-types.html#type-guards-and-differentiating-types\" target=\"_blank\" rel=\"noopener noreferrer\">type guard<OutboundLink/></a> in Typescript. It hints typescript about the type of an argument of a <em>type predicate</em>.</p>\n<!--beforebegin--><div class=\"language-ts extra-class\"><!--afterbegin--><pre v-pre class=\"language-ts\"><code><span class=\"token keyword\">const</span> isPen <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>x<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> x <span class=\"token keyword\">is</span> Pen <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> x <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Pen</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> p<span class=\"token operator\">:</span> Pen <span class=\"token operator\">|</span> <span class=\"token keyword\">undefined</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">=</span> <span class=\"token function\">getPen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isPen</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// typescript knows that `p` is `Pen`</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// typescript knows that `p` is `undefined | null`</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>You can see this in <a href=\"https://www.typescriptlang.org/play/?ssl=1&amp;ssc=1&amp;pln=17&amp;pc=2#code/CYUwxgNghgTiAEkoGdnwAogHbwN7wF8AoUJOeAMwFcswAXASwHscBzEOzLACgEoAuDNngAfeDVAUGWEMFHwsVCBCKqwLZHXgNkXeAF543AB6CoWAJ4D4x7Wj36AfHiLx4cOlRg5b0zebAQJgohLCJiInUsTXgAB0E9MQkQKRk5MUVlA3h2Tmw+VQYQ7h0ubljeXhc3AHoa+DoLWJBkMBgGWK0AaywmAHc0OgALKC0AA1ixu3gxrjHXOPD4EAhkBFwFuoamlraO7t6BhpHxyemx5NTZeUyIebdY8KA\" target=\"_blank\" rel=\"noopener noreferrer\">typescript playground<OutboundLink/></a>. You can hover on the variables to see how the type narrows down in the if statements.</p>\n<p>Using this with <code>filter</code> we can filter a list of <code>Pen | undefined | null</code> to a list of <code>Pen</code>.</p>\n<!--beforebegin--><div class=\"language-ts extra-class\"><!--afterbegin--><pre v-pre class=\"language-ts\"><code><span class=\"token keyword\">const</span> ps<span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>Pen <span class=\"token operator\">|</span> <span class=\"token keyword\">undefined</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">getPens</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> pens <span class=\"token operator\">=</span> ps<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>isPen<span class=\"token punctuation\">)</span> <span class=\"token comment\">// typescript knows that `pens` is `Pen[]`</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>However, the problem with this pattern is that Typescript does not care if the implementation of a type guard is correct.</p>\n<!--beforebegin--><div class=\"language-ts extra-class\"><!--afterbegin--><pre v-pre class=\"language-ts\"><code><span class=\"token keyword\">const</span> isPen <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>x<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> x <span class=\"token keyword\">is</span> Pen <span class=\"token operator\">=></span> <span class=\"token boolean\">true</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>In this case, <code>isPen</code> is obviously wrong, but typescript will still assume that <code>x</code> will be <code>Pen</code> if <code>isPen</code> returns true. This does not give developers good confidence about the types.</p>\n<p>This is why I try to avoid <code>is</code> where possible.</p>\n<h2 id=\"flatmap-as-filter\"><a class=\"header-anchor\" href=\"#flatmap-as-filter\">#</a> <code>flatMap</code> as <code>filter</code></h2>\n<p>In most cases, we can avoid <code>is</code> by explicitly using <code>instanceof</code> or <code>!</code>. In the first example, we can just do:</p>\n<!--beforebegin--><div class=\"language-ts extra-class\"><!--afterbegin--><pre v-pre class=\"language-ts\"><code><span class=\"token keyword\">const</span> p<span class=\"token operator\">:</span> Pen <span class=\"token operator\">|</span> <span class=\"token keyword\">undefined</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">=</span> <span class=\"token function\">getPen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>p <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Pen</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// typescript knows that `p` is `Pen`</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// typescript knows that `p` is `undefined | null`</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// or </span>\n\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token operator\">!</span>p<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// typescript knows that `p` is `Pen`</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// typescript knows that `p` is `undefined | null`</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>However, when using <code>filter</code>, <code>is</code> is basically inevitable.</p>\n<p>I have therefore come up with this technique of using <code>flatMap</code> as <code>filter</code>.</p>\n<!--beforebegin--><div class=\"language-ts extra-class\"><!--afterbegin--><pre v-pre class=\"language-ts\"><code><span class=\"token keyword\">const</span> ps<span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>Pen <span class=\"token operator\">|</span> <span class=\"token keyword\">undefined</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">getPens</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> pens <span class=\"token operator\">=</span> ps<span class=\"token punctuation\">.</span><span class=\"token function\">flatMap</span><span class=\"token punctuation\">(</span>p <span class=\"token operator\">=></span> <span class=\"token operator\">!</span>p <span class=\"token operator\">?</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>p<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// typescript knows that `pens` is `Pen[]`</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>Since typescript can infer the <code>p =&gt; !p ? [] : [p]</code> as <code>Pen | undefined | null =&gt; Pen</code>, the resulting array will be <code>Pen[]</code>.</p>\n<p>With this technique, we are relying on typescript's type inference instead of manual type guarding (<code>is</code>) to filter the list. This gives developers much more confidence about the type. I personally also think that it is worth the extra noise added to the code for the type safety. (Let me know in comments if you don't!)</p>\n<p>If you are confused about how <code>flatMap</code> works, you can read the following short introduction on <code>flatMap</code>.</p>\n<h2 id=\"what-is-flatmap\"><a class=\"header-anchor\" href=\"#what-is-flatmap\">#</a> What is <code>flatMap</code>?</h2>\n<p><code>flatMap</code> can basically be defined as (roughly):</p>\n<!--beforebegin--><div class=\"language-ts extra-class\"><!--afterbegin--><pre v-pre class=\"language-ts\"><code><span class=\"token keyword\">const</span> flatMap <span class=\"token operator\">=</span> <span class=\"token operator\">&lt;</span><span class=\"token constant\">X</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">Y</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>xs<span class=\"token operator\">:</span> <span class=\"token constant\">X</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token function-variable function\">fn</span><span class=\"token operator\">:</span> <span class=\"token constant\">X</span> <span class=\"token operator\">=></span> <span class=\"token constant\">Y</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token constant\">Y</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> xs<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">flat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>In English, it maps each item <code>x</code> of <code>xs</code> into an array <code>ys</code> and flattens it.</p>\n<p>Below is a illustration of how <code>flatMap</code> works</p>\n<!--beforebegin--><div class=\"language- extra-class\"><!--afterbegin--><pre v-pre class=\"language-text\"><code>[1, 2, 3].flatMap(x =&gt; [x, x, x])\n\n// under the hood\n[1, 2, 3]\n⬇\n⬇ .map(x =&gt; [x, x, x])\n⬇\n[[1, 1, 1], [2, 2, 2], [3, 3, 3]]\n⬇\n⬇ .flat()\n⬇\n[1, 1, 1, 2, 2, 2, 3, 3, 3]\n</code></pre>\n<!--beforeend--></div><!--afterend--><h2 id=\"conclusion\"><a class=\"header-anchor\" href=\"#conclusion\">#</a> Conclusion</h2>\n<p>Type safety is the reason why we went for Typescript. So, using <code>is</code> and <code>as</code> feels like it kind of defeats the purpose. Typescript's type system help catch many problems. But <code>is</code> and <code>as</code> bypasses that and make problems undetectable. By avoiding <code>is</code> and <code>as</code>, developers will have more confidence in their code.</p>\n<p>What do you think about this technique? Let me know in the comments!</p>\n"}},"context":{}}