{"hash":"403dd7f84154c1bff586828ce1b83169314e242d","data":{"post":{"title":"How to elegantly flatten a list","content":"<h1 id=\"the-problem\"><a class=\"header-anchor\" href=\"#the-problem\">#</a> The problem</h1>\n<p>Given any list <code>xs</code>, where <code>xs</code> could contain other lists or any non-list values, we wish to extract all the values in <code>xs</code>. For example:</p>\n<ol>\n<li><code>flatten([1, [3], [[6, 7], [[[]], 8]]]) =&gt; [1, 3, 6, 7, 8]</code></li>\n<li><code>flatten([{a: 3}, 1, [[''], 2]]) =&gt; [{a: 3}, 1, '', 2]</code></li>\n</ol>\n<h1 id=\"recursive-solution\"><a class=\"header-anchor\" href=\"#recursive-solution\">#</a> Recursive solution</h1>\n<p>When we wish to derive a recursive solution, we must avoid thinking recursively. Never trace your code into the recursive calls! The correct approach is to assume that the function you want to define is already working on a smaller structure of the input, which in this case the smaller structure is obviously the tail of <code>xs</code>, i.e. <code>xs.slice(1)</code>. This assumption is called <code>the leap of faith</code>.</p>\n<p>So now if <code>flatten(xs.slice(1))</code> will work correctly, how could we use this to construct the full correct answer of <code>flatten(xs)</code>? Now obviously we are missing <code>xs[0]</code>. <code>xs[0]</code> could either be a non-list element or another list.</p>\n<p>If <code>xs[0]</code> is a non-list element, we simply add back <code>xs[0]</code> to the first place of <code>flatten(xs.slice(1))</code>, then we are done!</p>\n<p>If <code>xs[0]</code> is another list, we take a <code>leap of faith</code> and recursively call <code>flatten(xs[0])</code>. Then we can concat <code>flatten(xs[0])</code> to <code>flatten(xs.slice(1))</code>.</p>\n<!--beforebegin--><div class=\"language-javascript extra-class\"><!--afterbegin--><pre v-pre class=\"language-javascript\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">flatten</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">xs</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>Array<span class=\"token punctuation\">.</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span>xs<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token function\">flatten</span><span class=\"token punctuation\">(</span>xs<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span><span class=\"token function\">flatten</span><span class=\"token punctuation\">(</span>xs<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">else</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>xs<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span><span class=\"token function\">flatten</span><span class=\"token punctuation\">(</span>xs<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>Now what we miss is a base case. The smallest list that we can flatten must be <code>[]</code>, and the answer is obviously  <code>[]</code>.</p>\n<p>So the final code is</p>\n<!--beforebegin--><div class=\"language-javascript extra-class\"><!--afterbegin--><pre v-pre class=\"language-javascript\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">flatten</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">xs</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>xs<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>Array<span class=\"token punctuation\">.</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span>xs<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token function\">flatten</span><span class=\"token punctuation\">(</span>xs<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span><span class=\"token function\">flatten</span><span class=\"token punctuation\">(</span>xs<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">else</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>xs<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span><span class=\"token function\">flatten</span><span class=\"token punctuation\">(</span>xs<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend-->"}},"context":{}}