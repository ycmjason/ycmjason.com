{"hash":"726390f993c51108ab8cceab8fef4376a963e750","data":{"post":{"title":"I (roughly) defined (almost) every array method using recursion ðŸ˜‚","content":"<p>So... I have decided to define every array methods using recursion. (I haven't really tested all of them... so there might be some errors.)</p>\n<p>Also, I only defined the &quot;essence&quot; of most methods. Didn't follow the complete spec for most.</p>\n<h1 id=\"why\"><a class=\"header-anchor\" href=\"#why\">#</a> Why?</h1>\n<p>Why not?</p>\n<h1 id=\"how-is-this-useful\"><a class=\"header-anchor\" href=\"#how-is-this-useful\">#</a> How is this useful?</h1>\n<p>It is not.</p>\n<h1 id=\"array-from\"><a class=\"header-anchor\" href=\"#array-from\">#</a> <code>Array.from</code></h1>\n<p><code>Array.from</code> takes in two kinds of objects.</p>\n<ol>\n<li>Array-like objects that have a <code>length</code> property with zero-indexed elements</li>\n<li>Iterable objects that have an iterator at <code>[Symbol.iterator]</code></li>\n</ol>\n<!--beforebegin--><div class=\"language-jsx extra-class\"><!--afterbegin--><pre v-pre class=\"language-jsx\"><code><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">arrayFrom</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">o</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'length'</span> <span class=\"token keyword\">in</span> o<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token function\">arrayFromArrayLike</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Symbol<span class=\"token punctuation\">.</span>iterator <span class=\"token keyword\">in</span> o<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token function\">arrayFromIterator</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">[</span>Symbol<span class=\"token punctuation\">.</span>iterator<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">arrayFromArrayLike</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">arrayLikeObject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arrayLikeObject<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token operator\">...</span><span class=\"token function\">arrayFromArrayLike</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      <span class=\"token operator\">...</span>arrayLikeObject<span class=\"token punctuation\">,</span>\n      length<span class=\"token operator\">:</span> arrayLikeObject<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    arrayLikeObject<span class=\"token punctuation\">[</span>arrayLikeObject<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">arrayFromIterator</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">iterator</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> value<span class=\"token punctuation\">,</span> done <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> iterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>done<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>value<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span><span class=\"token function\">arrayFromIterator</span><span class=\"token punctuation\">(</span>iterator<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>Note: we ignore the 2nd and 3rd arguments of <code>Array.from</code>. (<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from\" target=\"_blank\" rel=\"noopener noreferrer\">see docs<OutboundLink/></a>)</p>\n<h1 id=\"array-of\"><a class=\"header-anchor\" href=\"#array-of\">#</a> <code>Array.of</code></h1>\n<!--beforebegin--><div class=\"language-jsx extra-class\"><!--afterbegin--><pre v-pre class=\"language-jsx\"><code><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">arrayOf</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>xs</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>xs<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>head<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>tail<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> xs\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>head<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span><span class=\"token function\">arrayOf</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>tail<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h1 id=\"array-prototype-concat\"><a class=\"header-anchor\" href=\"#array-prototype-concat\">#</a> <code>Array.prototype.concat</code></h1>\n<!--beforebegin--><div class=\"language-jsx extra-class\"><!--afterbegin--><pre v-pre class=\"language-jsx\"><code><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">concat</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">xs<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>arrays</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arrays<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> xs\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>ys<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>restArrays<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arrays\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ys<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>xs<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>restArrays<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>head<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>tail<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> ys\n  <span class=\"token keyword\">return</span> <span class=\"token function\">concat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>xs<span class=\"token punctuation\">,</span> head<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> tail<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>restArrays<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>Note: assuming concat only takes in 2 parameters</p>\n<h1 id=\"array-prototype-entries\"><a class=\"header-anchor\" href=\"#array-prototype-entries\">#</a> <code>Array.prototype.entries</code></h1>\n<!--beforebegin--><div class=\"language-jsx extra-class\"><!--afterbegin--><pre v-pre class=\"language-jsx\"><code><span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token function\">entries</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">xs<span class=\"token punctuation\">,</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>xs<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>head<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>tail<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> xs\n  <span class=\"token keyword\">yield</span> <span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">,</span> head<span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">yield</span><span class=\"token operator\">*</span> <span class=\"token function\">entries</span><span class=\"token punctuation\">(</span>tail<span class=\"token punctuation\">,</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>note: <code>i</code> does not exist in <code>Array.prototype.entries</code></p>\n<h1 id=\"array-prototype-every\"><a class=\"header-anchor\" href=\"#array-prototype-every\">#</a> <code>Array.prototype.every</code></h1>\n<!--beforebegin--><div class=\"language-jsx extra-class\"><!--afterbegin--><pre v-pre class=\"language-jsx\"><code><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">every</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">xs<span class=\"token punctuation\">,</span> predicate</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>xs<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>head<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>tail<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> xs\n  <span class=\"token keyword\">return</span> <span class=\"token function\">predicate</span><span class=\"token punctuation\">(</span>head<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">every</span><span class=\"token punctuation\">(</span>tail<span class=\"token punctuation\">,</span> predicate<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h1 id=\"array-prototype-fill\"><a class=\"header-anchor\" href=\"#array-prototype-fill\">#</a> <code>Array.prototype.fill</code></h1>\n<!--beforebegin--><div class=\"language-jsx extra-class\"><!--afterbegin--><pre v-pre class=\"language-jsx\"><code><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">fill</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">xs<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">,</span> start <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> end <span class=\"token operator\">=</span> xs<span class=\"token punctuation\">.</span>length <span class=\"token operator\">+</span> <span class=\"token number\">1</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>xs<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>head<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>tail<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> xs\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>start <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>head<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span><span class=\"token function\">fill</span><span class=\"token punctuation\">(</span>tail<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">,</span> start <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> end <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">fillFromStart</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>head<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>tail<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">fillFromStart</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">xs<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">,</span> end <span class=\"token operator\">=</span> xs<span class=\"token punctuation\">.</span>length <span class=\"token operator\">+</span> <span class=\"token number\">1</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>xs<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>end <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> xs\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>_<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>tail<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> xs\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span><span class=\"token function\">fillFromStart</span><span class=\"token punctuation\">(</span>tail<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">,</span> end <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h1 id=\"array-prototype-filter\"><a class=\"header-anchor\" href=\"#array-prototype-filter\">#</a> <code>Array.prototype.filter</code></h1>\n<!--beforebegin--><div class=\"language-jsx extra-class\"><!--afterbegin--><pre v-pre class=\"language-jsx\"><code><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">filter</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">xs<span class=\"token punctuation\">,</span> predicate</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>xs<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>head<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>tail<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> xs\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token operator\">...</span><span class=\"token punctuation\">(</span><span class=\"token function\">predicate</span><span class=\"token punctuation\">(</span>head<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token punctuation\">[</span>head<span class=\"token punctuation\">]</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token operator\">...</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>tail<span class=\"token punctuation\">,</span> predicate<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h1 id=\"array-prototype-find\"><a class=\"header-anchor\" href=\"#array-prototype-find\">#</a> <code>Array.prototype.find</code></h1>\n<!--beforebegin--><div class=\"language-jsx extra-class\"><!--afterbegin--><pre v-pre class=\"language-jsx\"><code><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">find</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">xs<span class=\"token punctuation\">,</span> predicate</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>xs<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">undefined</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>head<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>tail<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> xs\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">predicate</span><span class=\"token punctuation\">(</span>head<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> head\n  <span class=\"token keyword\">return</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span>tail<span class=\"token punctuation\">,</span> predicate<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h1 id=\"array-prototype-findindex\"><a class=\"header-anchor\" href=\"#array-prototype-findindex\">#</a> <code>Array.prototype.findIndex</code></h1>\n<!--beforebegin--><div class=\"language-jsx extra-class\"><!--afterbegin--><pre v-pre class=\"language-jsx\"><code><span class=\"token keyword\">const</span> findIndex <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">xs<span class=\"token punctuation\">,</span> predicate</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>xs<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>head<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>tail<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> xs\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">predicate</span><span class=\"token punctuation\">(</span>head<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">0</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">findIndex</span><span class=\"token punctuation\">(</span>tail<span class=\"token punctuation\">,</span> predicate<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h1 id=\"array-prototype-foreach\"><a class=\"header-anchor\" href=\"#array-prototype-foreach\">#</a> <code>Array.prototype.forEach</code></h1>\n<!--beforebegin--><div class=\"language-jsx extra-class\"><!--afterbegin--><pre v-pre class=\"language-jsx\"><code><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">forEach</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">xs<span class=\"token punctuation\">,</span> fn</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>xs<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>head<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>tail<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> xs\n  <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span>head<span class=\"token punctuation\">)</span>\n  <span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>tail<span class=\"token punctuation\">,</span> fn<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>notes: ignoring index</p>\n<h1 id=\"array-prototype-includes\"><a class=\"header-anchor\" href=\"#array-prototype-includes\">#</a> <code>Array.prototype.includes</code></h1>\n<!--beforebegin--><div class=\"language-jsx extra-class\"><!--afterbegin--><pre v-pre class=\"language-jsx\"><code><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">includes</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">xs<span class=\"token punctuation\">,</span> predicate</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>xs<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>head<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>tail<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> xs\n  <span class=\"token keyword\">const</span> <span class=\"token function\">predicate</span><span class=\"token punctuation\">(</span>head<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token function\">includes</span><span class=\"token punctuation\">(</span>tail<span class=\"token punctuation\">,</span> predicate<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h1 id=\"array-prototype-indexof\"><a class=\"header-anchor\" href=\"#array-prototype-indexof\">#</a> <code>Array.prototype.indexOf</code></h1>\n<!--beforebegin--><div class=\"language-jsx extra-class\"><!--afterbegin--><pre v-pre class=\"language-jsx\"><code><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">indexOf</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">xs<span class=\"token punctuation\">,</span> x</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>xs<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>head<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>tail<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> xs\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>head <span class=\"token operator\">===</span> x<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">0</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>tail<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h1 id=\"array-prototype-join\"><a class=\"header-anchor\" href=\"#array-prototype-join\">#</a> <code>Array.prototype.join</code></h1>\n<!--beforebegin--><div class=\"language-jsx extra-class\"><!--afterbegin--><pre v-pre class=\"language-jsx\"><code><span class=\"token keyword\">const</span> join <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>xs<span class=\"token punctuation\">,</span> separator <span class=\"token operator\">=</span> <span class=\"token string\">','</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>xs<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token string\">''</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>head<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>tail<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> xs\n  <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>head<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>separator<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>tail<span class=\"token punctuation\">,</span> separator<span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h1 id=\"array-prototype-map\"><a class=\"header-anchor\" href=\"#array-prototype-map\">#</a> <code>Array.prototype.map</code></h1>\n<!--beforebegin--><div class=\"language-jsx extra-class\"><!--afterbegin--><pre v-pre class=\"language-jsx\"><code><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">map</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">xs<span class=\"token punctuation\">,</span> fn</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>xs<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>head<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>tail<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> xs\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span>head<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>tail<span class=\"token punctuation\">,</span> fn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h1 id=\"array-prototype-reduce\"><a class=\"header-anchor\" href=\"#array-prototype-reduce\">#</a> <code>Array.prototype.reduce</code></h1>\n<!--beforebegin--><div class=\"language-jsx extra-class\"><!--afterbegin--><pre v-pre class=\"language-jsx\"><code><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">reduce</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">xs<span class=\"token punctuation\">,</span> fn<span class=\"token punctuation\">,</span> acc</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>xs<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> acc <span class=\"token operator\">===</span> <span class=\"token string\">'undefined'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TypeError</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Reduce of empty array with no initial value'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> acc\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>head<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>tail<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> xs\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> acc <span class=\"token operator\">===</span> <span class=\"token string\">'undefined'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span>tail<span class=\"token punctuation\">,</span> fn<span class=\"token punctuation\">,</span> head<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span>tail<span class=\"token punctuation\">,</span> fn<span class=\"token punctuation\">,</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span>acc<span class=\"token punctuation\">,</span> head<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h1 id=\"array-prototype-reverse\"><a class=\"header-anchor\" href=\"#array-prototype-reverse\">#</a> <code>Array.prototype.reverse</code></h1>\n<!--beforebegin--><div class=\"language-jsx extra-class\"><!--afterbegin--><pre v-pre class=\"language-jsx\"><code><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">reverse</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">xs</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>xs<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>head<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>tail<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> xs\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span>xs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> head<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h1 id=\"array-prototype-slice\"><a class=\"header-anchor\" href=\"#array-prototype-slice\">#</a> <code>Array.prototype.slice</code></h1>\n<p>Slice is a surprisingly annoying one to define. It needs to deal with negative indices, but you can't simply &quot;mod&quot; the numbers...</p>\n<!--beforebegin--><div class=\"language-jsx extra-class\"><!--afterbegin--><pre v-pre class=\"language-jsx\"><code><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">slice</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">xs<span class=\"token punctuation\">,</span> start <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> end <span class=\"token operator\">=</span> xs<span class=\"token punctuation\">.</span>length</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>xs<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>start <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token function\">slice</span><span class=\"token punctuation\">(</span>xs<span class=\"token punctuation\">,</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> start <span class=\"token operator\">+</span> xs<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>end <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token function\">slice</span><span class=\"token punctuation\">(</span>xs<span class=\"token punctuation\">,</span> start<span class=\"token punctuation\">,</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> end <span class=\"token operator\">+</span> xs<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>head<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>tail<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> xs\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>end <span class=\"token operator\">&lt;=</span> start<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>start <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token function\">slice</span><span class=\"token punctuation\">(</span>tail<span class=\"token punctuation\">,</span> start <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> end <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>head<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span>tail<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> end <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h1 id=\"array-prototype-some\"><a class=\"header-anchor\" href=\"#array-prototype-some\">#</a> <code>Array.prototype.some</code></h1>\n<!--beforebegin--><div class=\"language-jsx extra-class\"><!--afterbegin--><pre v-pre class=\"language-jsx\"><code><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">some</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">xs<span class=\"token punctuation\">,</span> predicate</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>xs<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>head<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>tail<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> xs\n  <span class=\"token keyword\">return</span> <span class=\"token function\">predicate</span><span class=\"token punctuation\">(</span>head<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token function\">some</span><span class=\"token punctuation\">(</span>tail<span class=\"token punctuation\">,</span> predicate<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend-->"}},"context":{}}