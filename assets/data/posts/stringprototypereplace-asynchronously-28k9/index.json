{"hash":"92b6eec4bf2a3491fefc2c80dc1cbcefeae7b2eb","data":{"post":{"title":"String.prototype.replace asynchronously?","content":"<p><em>Original post: <a href=\"https://www.ycmjason.com/blog/2018/04/28.html\" target=\"_blank\" rel=\"noopener noreferrer\">https://www.ycmjason.com/blog/2018/04/28.html<OutboundLink/></a></em></p>\n<blockquote>\n<p>this article assumes basic knowledge of RegExp.</p>\n</blockquote>\n<h2 id=\"background\"><a class=\"header-anchor\" href=\"#background\">#</a> Background</h2>\n<p>I was working with <a href=\"https://github.com/vuejs/vuepress\" target=\"_blank\" rel=\"noopener noreferrer\">vuepress<OutboundLink/></a> last week and I realise I want to be able to break my very long markdown into partials. So I raised this <a href=\"https://github.com/vuejs/vuepress/issues/222\" target=\"_blank\" rel=\"noopener noreferrer\">issue<OutboundLink/></a>. And the legend, Evan You, suggested to use <code>&lt;!-- include ./sectionA.md --&gt;</code>. Then I picked up his advise and started digging into the code of vuepress.</p>\n<h3 id=\"string-prototype-replace\"><a class=\"header-anchor\" href=\"#string-prototype-replace\">#</a> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace\" target=\"_blank\" rel=\"noopener noreferrer\">String.prototype.replace<OutboundLink/></a></h3>\n<p>Before I explain how I solved the problem, I would like to make sure we are all on the same page. My solution is based on <code>String.prototype.replace</code> function which I will very briefly explain how this function works. This function takes in two arguments:</p>\n<ol>\n<li>What to replace (RegExp | String)</li>\n<li>What to replace with (String | Function)</li>\n</ol>\n<h4 id=\"string-prototype-replace-string-string\"><a class=\"header-anchor\" href=\"#string-prototype-replace-string-string\">#</a> String.prototype.replace(<em>String</em>, <em>String</em>)</h4>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">const</span> str <span class=\"token operator\">=</span> <span class=\"token string\">'I am very happy, happy, happy.'</span><span class=\"token punctuation\">;</span>\nstr<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token string\">'happy'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'sad'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// I am very sad, happy, happy.</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>The above example shows how we could replace a word in a string. Notice that only the first occurrence of <code>happy</code> is replaced by <code>sad</code>. This behaviour is similar to when you pass in a RegExp without global flag.</p>\n<h4 id=\"string-prototype-replace-string-function\"><a class=\"header-anchor\" href=\"#string-prototype-replace-string-function\">#</a> String.prototype.replace(<em>String</em>, <em>Function</em>)</h4>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">const</span> str <span class=\"token operator\">=</span> <span class=\"token string\">'I am very happy, happy, happy.'</span><span class=\"token punctuation\">;</span>\nstr<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token string\">'happy'</span><span class=\"token punctuation\">,</span> <span class=\"token parameter\">word</span> <span class=\"token operator\">=></span> <span class=\"token string\">'not '</span> <span class=\"token operator\">+</span> word<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// ^ I am very not happy, happy, happy.</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>You could retrieve the matched word by passing in a replacer function. The value returned from the replacer function would be used to replace the <code>word</code>.</p>\n<p>This use case is rare and probably not very useful as you already know the targeting word. You could simply do <code>str.replace('happy', 'not happy')</code> to have the same effect.</p>\n<h4 id=\"string-prototype-replace-regexp-string\"><a class=\"header-anchor\" href=\"#string-prototype-replace-regexp-string\">#</a> String.prototype.replace(<em>RegExp</em>, <em>String</em>)</h4>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">const</span> str <span class=\"token operator\">=</span> <span class=\"token string\">'I am very happyyyyy, happy, happy.'</span><span class=\"token punctuation\">;</span>\nstr<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">happ(y+)</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span> <span class=\"token string\">'sleep$1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// I am very sleepyyyyy, happy, happy.</span>\nstr<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">happ(y+)</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">,</span> <span class=\"token string\">'sleep$1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// I am very sleepyyyyy, sleepy, sleepy.</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>Should be fairly straight forward. Two things to note:</p>\n<ol>\n<li><code>/happ(y+)/</code> matches &quot;happy&quot; and all the &quot;y&quot;s that come after it.</li>\n<li><code>$1</code> will be replaced by whatever is matched in the groups <code>()</code> of the RegExp. You can have more than one groups and simply use <code>$2</code>, <code>$3</code>, <code>$4</code> as their placeholders.</li>\n</ol>\n<h4 id=\"string-prototype-replace-regexp-function\"><a class=\"header-anchor\" href=\"#string-prototype-replace-regexp-function\">#</a> String.prototype.replace(<em>RegExp</em>, <em>Function</em>)</h4>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">const</span> str <span class=\"token operator\">=</span> <span class=\"token string\">'I am very happyyyyy, happy, happyy.'</span><span class=\"token punctuation\">;</span>\n\nstr<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">happ(y+)</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">match<span class=\"token punctuation\">,</span> ys</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// match: 'happyyyyy'; ys: 'yyyyy'</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token string\">'sleep'</span> <span class=\"token operator\">+</span> ys<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// I am very sleepyyyyy, happy, happyy.</span>\n\nstr<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">happ(y+)</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">match<span class=\"token punctuation\">,</span> ys</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// This function is called 3 times:</span>\n\t<span class=\"token comment\">//     1. match: 'happyyyyy'; ys: 'yyyyy'</span>\n\t<span class=\"token comment\">// \t   2. match: 'happy'; ys: 'y'</span>\n\t<span class=\"token comment\">//     3. match: 'happyy'; ys: 'yy'</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token string\">'sleep'</span> <span class=\"token operator\">+</span> ys<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// I am very sleepyyyyy, sleepy, sleepyy.</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>The comments should be quite self-explanatory.</p>\n<h3 id=\"the-synchronous-way\"><a class=\"header-anchor\" href=\"#the-synchronous-way\">#</a> The synchronous way</h3>\n<p>Back to the problem we have, to replace <code>&lt;!-- include ./sectionA.md --&gt;</code> with the content of <code>./sectionA.md</code>.</p>\n<p>Any decent regex-er could come up with a regex to match that placeholder, and we came up with something like:</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">const</span> placeholderRe <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">&lt;!--\\s*include\\s+([^\\s]+)\\s*--></span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>Note: <code>\\s</code> matches any space/tab etc. See <a href=\"https://www.w3schools.com/jsref/jsref_regexp_whitespace.asp\" target=\"_blank\" rel=\"noopener noreferrer\">here<OutboundLink/></a> for more information.</p>\n<p>This RegExp will match the placeholder as a whole and group the filename after the <code>include</code>.</p>\n<p>So I basically use the <code>String.prototype.replace</code> to do the job:</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> readFileSync<span class=\"token punctuation\">,</span> existsSync <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fs'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">replaceIncludePlaceholdersWithFileContents</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">str</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">const</span> placeholderRe <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">&lt;!--\\s*include\\s+([^\\s]+)\\s*--></span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span>placeholderRe<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">placeholder<span class=\"token punctuation\">,</span> filename</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">existsSync</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> placeholder<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">readFileSync</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">,</span> <span class=\"token string\">'utf8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>This works, we just need to handle one more case, i.e. when the partial being included also contain <code>&lt;!-- include file.md --&gt;</code>. Obviously this become a recursive problem. The way to deal with this is simply doing the <em>Leap of faith</em>.</p>\n<p>Simply by applying <code>replaceIncludePlaceholdersWithFileContents</code> recursively on the content of each file included by the current file would do the job!</p>\n<p>So we have something like:</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> readFileSync<span class=\"token punctuation\">,</span> existsSync <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fs'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">replaceIncludePlaceholdersWithFileContents</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">str</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">const</span> placeholderRe <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">&lt;!--\\s*include\\s+([^\\s]+)\\s*--></span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span>placeholderRe<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">placeholder<span class=\"token punctuation\">,</span> filename</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">existsSync</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> placeholder<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">replaceIncludePlaceholdersWithFileContents</span><span class=\"token punctuation\">(</span>\n\t        <span class=\"token function\">readFileSync</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">,</span> <span class=\"token string\">'utf8'</span><span class=\"token punctuation\">)</span>\n\t    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>This time our base case is when the included file do not contain the placeholder, then the function should terminate as the replacer function would not be called.</p>\n<h3 id=\"the-asynchronous-way\"><a class=\"header-anchor\" href=\"#the-asynchronous-way\">#</a> The asynchronous way</h3>\n<p>So I submitted the pull request, and some feedback has been given to me suggesting the use of <code>fs.readFile</code>, the async version of <code>fs.readFileSync</code>.</p>\n<p>Immediately I realise, if I have a function called <code>asyncStringReplace(str, search, replacer)</code> which does what <code>String.prototype.replace</code> does but allow <code>replacer</code> to return a <code>Promise</code>, then I could just change my code to the following and it would work.</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> readFile<span class=\"token punctuation\">,</span> existsSync <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fs-extra'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">replaceIncludePlaceholdersWithFileContents</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token parameter\">str</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">const</span> placeholderRe <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">&lt;!--\\s*include\\s+([^\\s]+)\\s*--></span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">await</span> <span class=\"token function\">asyncStringReplace</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">,</span> placeholderRe<span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">placeholder<span class=\"token punctuation\">,</span> filename</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">existsSync</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> placeholder<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">await</span> <span class=\"token function\">replaceIncludePlaceholdersWithFileContents</span><span class=\"token punctuation\">(</span>\n\t        <span class=\"token keyword\">await</span> <span class=\"token function\">readFile</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">,</span> <span class=\"token string\">'utf8'</span><span class=\"token punctuation\">)</span>\n\t    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>Spent so much time on thinking about the replacement of the placeholder, I would love to retain the already existing logic as much as possible.</p>\n<p>So now what I need to write is just the <code>asyncStringReplace</code> method.</p>\n<h2 id=\"asyncstringreplace\"><a class=\"header-anchor\" href=\"#asyncstringreplace\">#</a> asyncStringReplace</h2>\n<p>The <code>asyncStringReplace</code> method should take in three arguments:</p>\n<ol>\n<li><code>str</code> - the original string</li>\n<li><code>regex</code> - the RegExp that represents the substring of <code>str</code> to be replaced</li>\n<li><code>aReplacer</code> - an asynchronous function that takes in each match, should return <code>Promise</code>.</li>\n</ol>\n<p>I basically copied from <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec\" target=\"_blank\" rel=\"noopener noreferrer\">mdn<OutboundLink/></a> the &quot;while-loop&quot; that loops through the matches using <code>RegExp.prototype.exec</code>. By using <code>RegExp.prototype.exec</code> we could track the <code>RegExp.lastIndex</code> and <code>match.index</code> of each match, which I couldn't think of a way to achieve this with <code>String.prototype.match</code>.</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">asyncStringReplace</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">str<span class=\"token punctuation\">,</span> regex<span class=\"token punctuation\">,</span> aReplacer</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> substrs <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> match<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>match <span class=\"token operator\">=</span> regex<span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// put non matching string</span>\n        substrs<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> match<span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// call the async replacer function with the matched array spreaded</span>\n        substrs<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token function\">aReplacer</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>match<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        i <span class=\"token operator\">=</span> regex<span class=\"token punctuation\">.</span>lastIndex<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// put the rest of str</span>\n    substrs<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// wait for aReplacer calls to finish and join them back into string</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">await</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span>substrs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>My approach basically split the given <code>str</code> with the given <code>regex</code> into substrings and put them into <code>substrs</code>.</p>\n<p><code>substrs</code> therefore contains:</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token punctuation\">[</span>\n\t<span class=\"token comment\">/* first loop in while */</span>\n\t<span class=\"token constant\">NON_MATCHING_STRING</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token function\">aReplacer</span><span class=\"token punctuation\">(</span><span class=\"token constant\">MATCHING_STRING</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\n\t<span class=\"token comment\">/* second loop in while */</span>  \n\t<span class=\"token constant\">NON_MATCHING_STRING</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token function\">aReplacer</span><span class=\"token punctuation\">(</span><span class=\"token constant\">MATCHING_STRING</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\n\t<span class=\"token comment\">/* ... */</span><span class=\"token punctuation\">,</span>\n\n\t<span class=\"token comment\">/* n-th loop in while */</span>  \n\t<span class=\"token constant\">NON_MATCHING_STRING</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token function\">aReplacer</span><span class=\"token punctuation\">(</span><span class=\"token constant\">MATCHING_STRING</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\n\t<span class=\"token comment\">/* substrs.push(restStr) */</span>\n\t<span class=\"token constant\">REST_NON_MATCHING_STRING</span>\n<span class=\"token punctuation\">]</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>E.g.\nIf we call the following</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token function\">asyncStringReplace</span><span class=\"token punctuation\">(</span><span class=\"token string\">'i am happyy, happy === happyyy very!'</span><span class=\"token punctuation\">,</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">happ(y+)</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">,</span> someAsyncReplacer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>The corresponding <code>substrs</code> would be:</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token punctuation\">[</span>\n    <span class=\"token comment\">/* first loop in while */</span>\n\t<span class=\"token string\">'i am '</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token function\">someAsyncReplacer</span><span class=\"token punctuation\">(</span><span class=\"token string\">'happyy'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'yy'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\n    <span class=\"token comment\">/* second loop in while */</span>\n\t<span class=\"token string\">', '</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token function\">someAsyncReplacer</span><span class=\"token punctuation\">(</span><span class=\"token string\">'happy'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'y'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\n    <span class=\"token comment\">/* third loop in while */</span>\n\t<span class=\"token string\">' === '</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token function\">someAsyncReplacer</span><span class=\"token punctuation\">(</span><span class=\"token string\">'happyyy'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'yyy'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\n\t<span class=\"token comment\">/* substrs.push(restStr) */</span>\n\t<span class=\"token string\">' very!'</span>\n<span class=\"token punctuation\">]</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>Notice since <code>aReplacer</code> is an asynchronous function, <code>aReplacer(MATCHING_STRING)</code> would therefore be a <code>Promise</code>. <code>Promise.all</code> could be used here to construct a <code>Promise</code> which resolves when all promises are resolved in this list.</p>\n<p>The last line</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code>\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">await</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span>substrs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p><code>await Promise.all(substrs)</code> would yield to an array of string and <code>.join('')</code> would join all of them back together.</p>\n<p>An example of how this could be applied:</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> readFile<span class=\"token punctuation\">,</span> existsSync <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fs-extra'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">replaceIncludePlaceholdersWithFileContents</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token parameter\">str</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">const</span> placeholderRe <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">&lt;!--\\s*include\\s+([^\\s]+)\\s*--></span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">await</span> <span class=\"token function\">asyncStringReplace</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">,</span> placeholderRe<span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">placeholder<span class=\"token punctuation\">,</span> filename</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">existsSync</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> placeholder<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">await</span> <span class=\"token function\">replaceIncludePlaceholdersWithFileContents</span><span class=\"token punctuation\">(</span>\n\t        <span class=\"token keyword\">await</span> <span class=\"token function\">readFile</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">,</span> <span class=\"token string\">'utf8'</span><span class=\"token punctuation\">)</span>\n\t    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend-->"}},"context":{}}