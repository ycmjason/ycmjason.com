{"hash":"b480ab2207f3f9ba0d58093cfa631a4604c60479","data":{"post":{"title":"Do you know about these SVG techniques?","content":"<p>I recently discovered 3 really exciting <a href=\"https://developer.mozilla.org/en-US/docs/Web/SVG\" target=\"_blank\" rel=\"noopener noreferrer\">SVG<OutboundLink/></a> Techniques:</p>\n<ol>\n<li>Convert <a href=\"https://developer.mozilla.org/en-US/docs/Web/SVG\" target=\"_blank\" rel=\"noopener noreferrer\">SVG<OutboundLink/></a> to image with <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/canvas\" target=\"_blank\" rel=\"noopener noreferrer\">canvas<OutboundLink/></a></li>\n<li><a href=\"https://www.html5rocks.com/en/tutorials/canvas/hidpi/\" target=\"_blank\" rel=\"noopener noreferrer\">HiDPI Canvas<OutboundLink/></a></li>\n<li>Prefetching SVG: <em>Verrrrrryyyy cool</em></li>\n</ol>\n<p>I can't wait to tell you about them!</p>\n<h2 id=\"background-story\"><a class=\"header-anchor\" href=\"#background-story\">#</a> Background Story</h2>\n<p>So I created <a href=\"https://github.com/faviator/faviator\" target=\"_blank\" rel=\"noopener noreferrer\">Faviator<OutboundLink/></a> a few months back and so far I have received some really good feed back. Check it out and star it if you haven't already done so.</p>\n<p><a href=\"https://github.com/faviator/faviator\" target=\"_blank\" rel=\"noopener noreferrer\">Faviator<OutboundLink/></a> relied on a library called <a href=\"https://github.com/NotNinja/convert-svg\" target=\"_blank\" rel=\"noopener noreferrer\">convert-svg<OutboundLink/></a> which basically takes a screenshot of the SVG with <a href=\"https://github.com/GoogleChrome/puppeteer\" target=\"_blank\" rel=\"noopener noreferrer\">puppeteer<OutboundLink/></a> (headless chrome). The library was chosen because of its intuitive API and the fact that it uses <a href=\"https://github.com/GoogleChrome/puppeteer\" target=\"_blank\" rel=\"noopener noreferrer\">puppeteer<OutboundLink/></a>, which guarantees that the image output would look exactly the same as what we see on Chrome.</p>\n<p>However, there are two main issues this library:</p>\n<ol>\n<li>Image quality is not excellent; blurry image is generated</li>\n<li>CSS <code>@import()</code> or <code>url()</code> are not always being loaded when the screenshot is taken</li>\n</ol>\n<blockquote>\n<p>Don't get me wrong. <a href=\"https://github.com/NotNinja/convert-svg\" target=\"_blank\" rel=\"noopener noreferrer\">convert-svg<OutboundLink/></a> is still an amazing project!</p>\n</blockquote>\n<p>The second issue is very crucial for <a href=\"https://github.com/faviator/faviator\" target=\"_blank\" rel=\"noopener noreferrer\">Faviator<OutboundLink/></a> which fetches font files from <a href=\"https://fonts.google.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Google Fonts<OutboundLink/></a>. I did find out how to fix it and submitted a <a href=\"https://github.com/NotNinja/convert-svg/pull/45\" target=\"_blank\" rel=\"noopener noreferrer\">PR<OutboundLink/></a>, but the owner seems to be too busy to spend time on the project.</p>\n<p>So I decided to create my own: <a href=\"https://www.npmjs.com/package/@ycm.jason/svg-to-img\" target=\"_blank\" rel=\"noopener noreferrer\">@ycm.jason/svg-to-img<OutboundLink/></a>; aiming to solve these problems. While working on this, I have discovered some really cool techniques to be used with SVG, so I thought I could make a blog post about my discoveries.</p>\n<h2 id=\"convert-svg-to-image-with-canvas\"><a class=\"header-anchor\" href=\"#convert-svg-to-image-with-canvas\">#</a> Convert <a href=\"https://developer.mozilla.org/en-US/docs/Web/SVG\" target=\"_blank\" rel=\"noopener noreferrer\">SVG<OutboundLink/></a> to image with <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/canvas\" target=\"_blank\" rel=\"noopener noreferrer\">canvas<OutboundLink/></a></h2>\n<p>As I mentioned, one way to convert <a href=\"https://developer.mozilla.org/en-US/docs/Web/SVG\" target=\"_blank\" rel=\"noopener noreferrer\">SVG<OutboundLink/></a> to image is by doing a screenshot with <a href=\"https://github.com/GoogleChrome/puppeteer\" target=\"_blank\" rel=\"noopener noreferrer\">puppeteer<OutboundLink/></a>. It is actually a pretty nice approach as we won't have to worry about any error that could occur during the rendering of the <a href=\"https://developer.mozilla.org/en-US/docs/Web/SVG\" target=\"_blank\" rel=\"noopener noreferrer\">SVG<OutboundLink/></a>.</p>\n<p>Another approach is with HTML5 <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/canvas\" target=\"_blank\" rel=\"noopener noreferrer\">canvas<OutboundLink/></a>. We can draw an <code>&lt;img&gt;</code> on a <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/canvas\" target=\"_blank\" rel=\"noopener noreferrer\">canvas<OutboundLink/></a> easily with the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/drawImage\" target=\"_blank\" rel=\"noopener noreferrer\">drawImage<OutboundLink/></a> method. As a combo, <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/canvas\" target=\"_blank\" rel=\"noopener noreferrer\">canvas<OutboundLink/></a> also provides a <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/toDataURL\" target=\"_blank\" rel=\"noopener noreferrer\">toDataURL<OutboundLink/></a> method which exports the drawing to either PNG or JPEG format.</p>\n<p>Okay.. So what?</p>\n<p>This mean, we can:</p>\n<ol>\n<li>Point an <code>&lt;img&gt;</code> to a SVG</li>\n<li>Draw the <code>&lt;img&gt;</code> on a <code>&lt;canvas&gt;</code></li>\n<li>Export the <code>&lt;canvas&gt;</code> as a PNG or JPEG</li>\n</ol>\n<p>Here is a quick demo:</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">const</span> img <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'img'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nimg<span class=\"token punctuation\">.</span>src <span class=\"token operator\">=</span> <span class=\"token string\">'some/path/to/the/awesome.svg'</span><span class=\"token punctuation\">;</span>\nimg<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onload</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> canvas <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'canvas'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> context <span class=\"token operator\">=</span> canvas<span class=\"token punctuation\">.</span><span class=\"token function\">getContext</span><span class=\"token punctuation\">(</span><span class=\"token string\">'2d'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// draw img to (0, 0) on the canvas</span>\n  context<span class=\"token punctuation\">.</span><span class=\"token function\">drawImage</span><span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// export the PNG or JPEG</span>\n  <span class=\"token keyword\">const</span> pngDataURL <span class=\"token operator\">=</span> canvas<span class=\"token punctuation\">.</span><span class=\"token function\">toDataURL</span><span class=\"token punctuation\">(</span><span class=\"token string\">'image/png'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> jpegDataURL <span class=\"token operator\">=</span> canvas<span class=\"token punctuation\">.</span><span class=\"token function\">toDataURL</span><span class=\"token punctuation\">(</span><span class=\"token string\">'image/jpeg'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// ... do something with them ...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>Notice all this happens in the browser, which enable <a href=\"https://www.npmjs.com/package/@ycm.jason/svg-to-img\" target=\"_blank\" rel=\"noopener noreferrer\">@ycm.jason/svg-to-img<OutboundLink/></a> to support both the browser and Node.js (with <a href=\"https://github.com/GoogleChrome/puppeteer\" target=\"_blank\" rel=\"noopener noreferrer\">puppeteer<OutboundLink/></a>).</p>\n<h2 id=\"hidpi-canvas\"><a class=\"header-anchor\" href=\"#hidpi-canvas\">#</a> <a href=\"https://www.html5rocks.com/en/tutorials/canvas/hidpi/\" target=\"_blank\" rel=\"noopener noreferrer\">HiDPI Canvas<OutboundLink/></a></h2>\n<p>HiDPI Canvas is a technique introduced by Paul Lewis. It addresses the problem with the High DPI devices and the drawing of <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/canvas\" target=\"_blank\" rel=\"noopener noreferrer\">canvas<OutboundLink/></a>. Please see his <a href=\"https://www.html5rocks.com/en/tutorials/canvas/hidpi/\" target=\"_blank\" rel=\"noopener noreferrer\">article<OutboundLink/></a> for detailed explanation.</p>\n<p>Summary:</p>\n<ol>\n<li>Canvas drawing are drawn with 2x the pixels in High DPI devices to keep the width and height</li>\n<li>This is basically upscaling the image which leads to blurry image</li>\n<li>To solve this, we can draw the canvas 2x the intended size and use CSS to shrink it back to intended size.</li>\n</ol>\n<p>Quick example (intended to draw 200x500):</p>\n<!--beforebegin--><div class=\"language-html extra-class\"><!--afterbegin--><pre v-pre class=\"language-html\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>canvas</span> <span class=\"token attr-name\">width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>400<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">height</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>1000<span class=\"token punctuation\">\"</span></span><span class=\"token style-attr language-css\"><span class=\"token attr-name\"> <span class=\"token attr-name\">style</span></span><span class=\"token punctuation\">=\"</span><span class=\"token attr-value\"><span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 200<span class=\"token punctuation\">;</span> <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 500</span><span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>canvas</span><span class=\"token punctuation\">></span></span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>This technique enable me to convert <a href=\"https://developer.mozilla.org/en-US/docs/Web/SVG\" target=\"_blank\" rel=\"noopener noreferrer\">SVG<OutboundLink/></a> to sharp images on high DPI screens. However, it requires some manual resizing of the image. The current implementation uses <a href=\"https://github.com/oliver-moran/jimp\" target=\"_blank\" rel=\"noopener noreferrer\">jimp<OutboundLink/></a> but I intend to write a smaller one just for this purpose. (Since now I include the whole freaking <a href=\"https://github.com/oliver-moran/jimp\" target=\"_blank\" rel=\"noopener noreferrer\">jimp<OutboundLink/></a> inside the bundle. This is sinful...)</p>\n<p>You can see how different they are:\n<strong>Original SVG</strong>\n<img src=\"https://svgshare.com/i/7Sp.svg\" alt=\"\">\n<a href=\"https://svgshare.com/i/7Sp.svg\" target=\"_blank\" rel=\"noopener noreferrer\">https://svgshare.com/i/7Sp.svg<OutboundLink/></a></p>\n<p>(the image showing is not an SVG... The image host convert it to png...)</p>\n<p><strong>Without HiDPI technique</strong>\n<img src=\"https://i.imgur.com/vzps1C7.png\" alt=\"\"></p>\n<p><strong>With HiDPI technique</strong>\n<img src=\"https://i.imgur.com/UsQSmgN.png\" alt=\"\"></p>\n<p>Can you see the difference? If you focus on tips of the &quot;F&quot;, you will notice how the last one matches the original SVG more.</p>\n<p>Although this definitely improves the image detail, it still appears to bit a little bit blurry. This could be caused by the resizing of the image. I am not an expert in image processing, would be nice if you can tell me some useful techniques that I could use here.</p>\n<h2 id=\"prefetching-svg\"><a class=\"header-anchor\" href=\"#prefetching-svg\">#</a> Prefetching SVG</h2>\n<p>CSS could be embedded in SVG to control the styles. With the introduction of CSS3 <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/@import\" target=\"_blank\" rel=\"noopener noreferrer\">@import<OutboundLink/></a>, we could now include css inside css definition! How amazing!</p>\n<p>However, if you are displaying your SVG in <code>&lt;img&gt;</code>, you might find out that the styles are not imported. The browser (or just Chrome) seems to ignore any external resources if SVG is used in <code>&lt;img&gt;</code>.</p>\n<p>I invented a technique called Prefetching SVG which can solve the above problem and make your SVG looks the same even when you are offline!</p>\n<p>The idea is to replace <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/@import\" target=\"_blank\" rel=\"noopener noreferrer\">@import<OutboundLink/></a> with the content that it is importing. Replace all <code>url()</code> with a data url. I have created a library to do this: <a href=\"https://github.com/ycmjason/prefetch-svg\" target=\"_blank\" rel=\"noopener noreferrer\">prefetch-svg<OutboundLink/></a>.</p>\n<p><strong>Without prefetching</strong></p>\n<blockquote>\n<p>Since you might have the font-family installed locally, I explicitly removed the <code>@import</code> to demonstrate.</p>\n</blockquote>\n<p><img src=\"https://svgshare.com/i/7RH.svg\" alt=\"\"></p>\n<p><strong>With prefetching</strong></p>\n<p><img src=\"http://svgur.com/i/7Sp.svg\" alt=\"\"></p>\n<h2 id=\"that-s-it\"><a class=\"header-anchor\" href=\"#that-s-it\">#</a> That's it</h2>\n<p>And that's it. Here is my little sharing about SVGs. Tell me what you think! Have I missed anything?</p>\n"}},"context":{}}