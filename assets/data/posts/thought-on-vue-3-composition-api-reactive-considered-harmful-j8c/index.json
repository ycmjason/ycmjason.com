{"hash":"5c0aa5fa9d59fdb05f0d828ce1b83169314e242d","data":{"post":{"title":"Thought on Vue 3 Composition API - `reactive()` considered harmful","content":"<p>Vue.js stands out from other frameworks for its intuitive reactivity. Vue 3 composition api is going to removing some limitations in Vue 2 and provide a more explicit api.</p>\n<h2 id=\"quick-intro-to-the-composition-api\"><a class=\"header-anchor\" href=\"#quick-intro-to-the-composition-api\">#</a> Quick Intro to the Composition API</h2>\n<p>There are two ways to create reactive &quot;things&quot;:</p>\n<ol>\n<li><code>reactive()</code></li>\n<li><code>ref()</code> / <code>computed()</code></li>\n</ol>\n<h3 id=\"introducing-reactive\"><a class=\"header-anchor\" href=\"#introducing-reactive\">#</a> Introducing <code>reactive()</code></h3>\n<p><code>reactive(obj)</code> will return a new object that looks exactly the same as <code>obj</code>, but any mutation to the new object will be tracked.</p>\n<p>For example:</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token comment\">// template: {{ state.a }} - {{ state.b }}</span>\n<span class=\"token keyword\">const</span> state <span class=\"token operator\">=</span> <span class=\"token function\">reactive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> a<span class=\"token operator\">:</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// renders: 3 - undefined</span>\n\nstate<span class=\"token punctuation\">.</span>a <span class=\"token operator\">=</span> <span class=\"token number\">5</span>\nstate<span class=\"token punctuation\">.</span>b <span class=\"token operator\">=</span> <span class=\"token string\">'bye'</span>\n<span class=\"token comment\">// renders: 5 - bye</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>This works exactly like <code>data</code> in Vue 2. Except we can now add new properties to them as reactivity is implemented with proxies in Vue 3.</p>\n<h3 id=\"introducing-ref\"><a class=\"header-anchor\" href=\"#introducing-ref\">#</a> Introducing <code>Ref</code></h3>\n<p>Vue composition API introduced <code>Ref</code> which is simply an object with 1 property <code>.value</code>. We can express this using Typescript:</p>\n<!--beforebegin--><div class=\"language-ts extra-class\"><!--afterbegin--><pre v-pre class=\"language-ts\"><code><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Ref</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">A</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n  value<span class=\"token operator\">:</span> <span class=\"token constant\">A</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>There are two ways of creating refs:</p>\n<ol>\n<li><code>ref()</code></li>\n</ol>\n<ul>\n<li><code>.value</code> can be get/set.</li>\n</ul>\n<ol start=\"2\">\n<li><code>computed()</code></li>\n</ol>\n<ul>\n<li><code>.value</code> is readonly unless a setter is provided.</li>\n</ul>\n<p>For Example:</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">const</span> countRef <span class=\"token operator\">=</span> <span class=\"token function\">ref</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// { value: 0 }</span>\n<span class=\"token keyword\">const</span> countPlusOneRef <span class=\"token operator\">=</span> <span class=\"token function\">computed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> countRef<span class=\"token punctuation\">.</span>value <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// { value: 1 }</span>\ncountRef<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token number\">5</span>\n\n<span class=\"token comment\">/*\n * countRef is { value: 5 }\n * countPlusOneRef is { value: 6 } (readonly)\n */</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h2 id=\"reactive-is-bad-ref-is-good\"><a class=\"header-anchor\" href=\"#reactive-is-bad-ref-is-good\">#</a> <code>reactive()</code> is bad; <code>Ref</code> is good.</h2>\n<p>This section of the article is purely my tentative opinion on the composition api after building a few projects with it. Do try it yourself and let me know if you agree.</p>\n<p>Before using the composition api, I thought <code>reactive()</code> would be the api that everyone will end up using as it doesn't require the need to do <code>.value</code>. Surprisingly, after building a few projects with the composition api, not once have I used <code>reactive()</code> so far!</p>\n<p>Here are 3 reasons why:</p>\n<ol>\n<li>Convenience - <code>ref()</code> allow declaration of new reactive variable on the fly.</li>\n<li>Flexibility - <code>ref()</code> allow complete replacement of an object</li>\n<li>Explicitness - <code>.value</code> forces you to be aware of what you are doing</li>\n</ol>\n<h3 id=\"_1-convenience\"><a class=\"header-anchor\" href=\"#_1-convenience\">#</a> 1. Convenience</h3>\n<p>The composition api is proposed to provide a way to group code with accordance to their feature in the component instead of their function in Vue. The options api groups code into <code>data</code>, <code>computed</code>, <code>methods</code>, lifecycles etc. This make it almost impossible to group code by feature. See the following image:</p>\n<p><img src=\"https://user-images.githubusercontent.com/499550/62783026-810e6180-ba89-11e9-8774-e7771c8095d6.png\" alt=\"\"></p>\n<p>Consider the following examples:</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">const</span> state <span class=\"token operator\">=</span> <span class=\"token function\">reactive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  count<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n  errorMessage<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> state<span class=\"token punctuation\">.</span>count<span class=\"token operator\">++</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">watch</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">,</span> <span class=\"token parameter\">count</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>count <span class=\"token operator\">></span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    state<span class=\"token punctuation\">.</span>errorMessage <span class=\"token operator\">=</span> <span class=\"token string\">'Larger than 10.'</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>If we use <code>reactive()</code> to store multiple properties. It is easy to fall back into the trap of grouping things by functions, not feature. You will likely be jumping around the code base to modify that reactive object. This makes the development process less smooth.</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">const</span> count <span class=\"token operator\">=</span> <span class=\"token function\">ref</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> count<span class=\"token punctuation\">.</span>value<span class=\"token operator\">++</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> errorMessage <span class=\"token operator\">=</span> <span class=\"token function\">ref</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">watch</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">,</span> <span class=\"token parameter\">count</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>count <span class=\"token operator\">></span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    errorMessage<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token string\">'Larger than 10.'</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>On the other hand, <code>ref()</code> allow us to introduce new variables on the fly. From the example above, I only introduce variables as I need them. This makes the development process much smoother and intuitive.</p>\n<h3 id=\"_2-flexibility\"><a class=\"header-anchor\" href=\"#_2-flexibility\">#</a> 2. Flexibility</h3>\n<p>I initially thought the sole purpose of <code>ref()</code> was to enable primitive values to be reactive. But it can become extremely handy too when using <code>ref()</code> with objects.</p>\n<p>Consider:</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">const</span> blogPosts <span class=\"token operator\">=</span> <span class=\"token function\">ref</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\nblogPosts<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetchBlogPosts</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>If we wish to do the same with <code>reactive</code>, we need to mutate the array instead.</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">const</span> blogPosts <span class=\"token operator\">=</span> <span class=\"token function\">reactive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> post <span class=\"token keyword\">of</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">await</span> <span class=\"token function\">fetchBlogPosts</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  blogPosts<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>post<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>or with our &quot;beloved&quot; <code>Array.prototype.splice()</code></p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">const</span> blogPosts <span class=\"token operator\">=</span> <span class=\"token function\">reactive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\nblogPosts<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">await</span> <span class=\"token function\">fetchBlogPosts</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>As illustrated, <code>ref()</code> is simpler to work with in this case as you can just replace the whole array with a new one. If that doesn't convince you, imagine if the <code>blogPosts</code> needs to be paginated:</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token function\">watch</span><span class=\"token punctuation\">(</span>page<span class=\"token punctuation\">,</span> <span class=\"token parameter\">page</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// remove everything from `blogPosts`</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>blogPosts<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    blogPosts<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  \n  <span class=\"token comment\">// add everything from new page</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> post <span class=\"token keyword\">of</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">await</span> <span class=\"token function\">fetchBlogPostsOnPage</span><span class=\"token punctuation\">(</span>page<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    blogPosts<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>post<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>or with our best friend <code>splice</code></p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token function\">watch</span><span class=\"token punctuation\">(</span>page<span class=\"token punctuation\">,</span> <span class=\"token parameter\">page</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  blogPosts<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> blogPosts<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">await</span> <span class=\"token function\">fetchBlogPostsOnPage</span><span class=\"token punctuation\">(</span>page<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>But if we use <code>ref()</code></p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token function\">watch</span><span class=\"token punctuation\">(</span>page<span class=\"token punctuation\">,</span> <span class=\"token parameter\">page</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  blogPosts<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetchBlogPostsOnPage</span><span class=\"token punctuation\">(</span>page<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>It is much flexible to work with.</p>\n<h3 id=\"_3-explicitness\"><a class=\"header-anchor\" href=\"#_3-explicitness\">#</a> 3. Explicitness</h3>\n<p><code>reactive()</code> returns an object that we will interact with the same we interact with other non-reactive object. This is cool, but can become confusing in practise if we have deal with other non-reactive objects.</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token function\">watch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>human<span class=\"token punctuation\">.</span>name <span class=\"token operator\">===</span> <span class=\"token string\">'Jason'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>partner<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      partner<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> <span class=\"token number\">30</span> \n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>We cannot really tell if <code>human</code> or <code>partner</code> is reactive. But if we ditch using <code>reactive()</code> and consistently utilise <code>ref()</code>, we won't have the same problem.</p>\n<p><code>.value</code> may seem wordy at first; but it helps reminding us that we are dealing with reactivity.</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token function\">watch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>human<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">.</span>name <span class=\"token operator\">===</span> <span class=\"token string\">'Jason'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>partner<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      partner<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> <span class=\"token number\">30</span> \n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>It becomes obvious now that <code>human</code> is reactive but not <code>partner</code>.</p>\n<h2 id=\"conclusion\"><a class=\"header-anchor\" href=\"#conclusion\">#</a> Conclusion</h2>\n<p>The above observations and opinions are totally tentative. What do you think? Do you agree <code>ref()</code> is going to dominate in Vue 3? Or do you think <code>reactive()</code> will be preferred?</p>\n<p>Let me know in the comments! I would love to hear more thoughts!</p>\n"}},"context":{}}