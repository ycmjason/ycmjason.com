{"hash":"9a7527b052bb2472b2e9aa2e3951513128917c99","data":{"post":{"title":"Looks like Vue.js will likely out-star React over the weekend!","content":"<blockquote>\n<p>original post: <a href=\"https://www.ycmjason.com/blog/2018/06/14.html\" target=\"_blank\" rel=\"noopener noreferrer\">https://www.ycmjason.com/blog/2018/06/14.html<OutboundLink/></a></p>\n</blockquote>\n<p>It's almost there! It's almost there!!!!</p>\n<p>Few weeks ago I published <a href=\"https://github.com/ycmjason/vue-vs-react\" target=\"_blank\" rel=\"noopener noreferrer\">vue-vs-react<OutboundLink/></a>.</p>\n<p>Since the star difference are getting closer and closer (268 stars gap at the moment I am typing this), I decided to add a new feature to my project. Fireworks will explode with a background audio at the moment that Vue out-star React!</p>\n<p>You can simply open <a href=\"https://vue-vs-react.ycmjason.com/\" target=\"_blank\" rel=\"noopener noreferrer\">the website<OutboundLink/></a> in a tab and when Vue out-star React, you should get notified by the background music!</p>\n<p>I am so so so so so excited!</p>\n<h1 id=\"things-worth-mentioning-when-building-this-project\"><a class=\"header-anchor\" href=\"#things-worth-mentioning-when-building-this-project\">#</a> Things worth mentioning when building this project</h1>\n<h2 id=\"first-time-using-refs\"><a class=\"header-anchor\" href=\"#first-time-using-refs\">#</a> First time using <code>$refs</code></h2>\n<p>There isn't many cases of obtaining direct reference to the DOM when using Vue. Most stuff could be easily handled with the power of Vue.</p>\n<p>In this project tho, I have an <code>&lt;audio&gt;</code> which will be triggered to play when <code>vue.stars &gt; react.stars</code>. In order to do so, I must get the reference to the element and do <code>elem.play()</code>. The way to get a reference to a DOM in Vue is by adding <code>ref=&quot;name&quot;</code>. So I just simply did the following (see <a href=\"https://github.com/ycmjason/vue-vs-react/blob/v0.2.0/src/components/Vs.vue#L3\" target=\"_blank\" rel=\"noopener noreferrer\">this line<OutboundLink/></a>):</p>\n<!--beforebegin--><div class=\"language-html extra-class\"><!--afterbegin--><pre v-pre class=\"language-html\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>audio</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>...<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">ref</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>audio<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>audio</span><span class=\"token punctuation\">></span></span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>Then <code>this.$refs.audio</code> will be pointing to that element! Now I could do <code>this.$refs.audio.play()</code> and <code>this.$refs.audio.pause()</code> inside the component!!!! (see <a href=\"https://github.com/ycmjason/vue-vs-react/blob/v0.2.0/src/components/Vs.vue#L33\" target=\"_blank\" rel=\"noopener noreferrer\">this line<OutboundLink/></a>)</p>\n<p>This make me realise for the first time that <code>$refs</code> could be useful when <strong>you want to access the native apis</strong>.</p>\n<p>The way that I am currently doing is quite hacky. The proper way would probably look something like:</p>\n<!--beforebegin--><div class=\"language-html extra-class\"><!--afterbegin--><pre v-pre class=\"language-html\"><code>// Audio.vue\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>audio</span> <span class=\"token attr-name\">:src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>src<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">ref</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>audio<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>audio</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{</span>\n    props<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'playing'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    watch<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">playing</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">p</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$refs<span class=\"token punctuation\">.</span>audio<span class=\"token punctuation\">.</span><span class=\"token function\">play</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">else</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$refs<span class=\"token punctuation\">.</span>audio<span class=\"token punctuation\">.</span><span class=\"token function\">pause</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// actually I will write: this.$refs.audio[p? 'play': 'pause']();</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>With this wrapping Audio component, we don't ever need to use <code>$refs</code> anywhere else in the codebase! <code>$refs</code> are low-level stuff and IMO, we should always wrap it around to lift the level of abstractions of the code.</p>\n<h2 id=\"vue-can-update-the-dom-really-quickly\"><a class=\"header-anchor\" href=\"#vue-can-update-the-dom-really-quickly\">#</a> Vue can update the DOM really quickly</h2>\n<p>If you have clicked into the website, you might notice the numbers kind of grow towards the number of stars of the repos. This effect is implemented with this <a href=\"https://github.com/ycmjason/vue-vs-react/blob/v0.2.0/src/components/TransitioningNumber.vue\" target=\"_blank\" rel=\"noopener noreferrer\">TransitioningNumber<OutboundLink/></a> component.</p>\n<p>The way this component work is that whenever the <code>porps.number</code> changes, it <a href=\"https://github.com/ycmjason/vue-vs-react/blob/v0.2.0/src/components/TransitioningNumber.vue#L32\" target=\"_blank\" rel=\"noopener noreferrer\">calculates the animation <code>frames</code><OutboundLink/></a>. The <code>frames</code> is simply a list of numbers ranging from the previous <code>props.number</code> to the current <code>props.number</code>. Since I have set the <code>FPS</code> to 22, the corresponding second per frame would be <code>1 / 22</code>. To animate this, we can simply change the <code>this.displayNumber</code> from the first frame to the last frame with a timeout of <code>1 / 22</code> seconds between each frame. I am surprised how good can Vue handle this and the result looks really satisfying to me.</p>\n<p>I will give an example to illustrate the above implementation. Say we want to show transition from <code>0</code> to <code>1000</code> within <code>2</code> seconds. To achieve 22 FPS, we know that we need <code>22 * 2 = 44</code> frames. So we will construct a list, <code>frames</code>, with 44 frames ranging from from 0 to 1000. It is obvious that each frame would have <code>step = 1000 / 44 = 22.7272727 ~= 23</code>. Then we construct the list <code>frames = [0, 23, 46, 68, ..., 1000]</code>. Then we set <code>this.displayNumber</code> to each frame with a timeout of <code>1 / 22</code> seconds between each frame.</p>\n<p><strong>This approach is more of an experiment and does look very naive. I would really appreciate if you could suggest a better approach. Please comment below!</strong></p>\n<h2 id=\"firestore-is-just-awesome\"><a class=\"header-anchor\" href=\"#firestore-is-just-awesome\">#</a> Firestore is just awesome</h2>\n<p>In this project I used <a href=\"https://firebase.google.com/\" target=\"_blank\" rel=\"noopener noreferrer\">firebase<OutboundLink/></a>, in case you haven't already heard, it is basically a backend-as-a-service, you won't need to care anything about the architecture of the server. It allows you to focus on the application logic.</p>\n<p><a href=\"https://firebase.google.com/products/firestore/\" target=\"_blank\" rel=\"noopener noreferrer\">Firestore<OutboundLink/></a> is a real-time database by firebase. It has a powerful API which includes basic CRUD (create, read, update, delete) operations and <strong>subscription to database updates</strong> and more!!!! You don't have to set up your own REST API anymore, just use firestore. You won't ever need to setup the very annoying WebSocket anymore, just use firestore! &quot;Amazing! Just do everything for me please!&quot;</p>\n<p>Please refer to these two files (<a href=\"https://github.com/ycmjason/vue-vs-react/blob/v0.2.0/src/services/repoSnapshots.js\" target=\"_blank\" rel=\"noopener noreferrer\">1<OutboundLink/></a> and <a href=\"https://github.com/ycmjason/vue-vs-react/blob/v0.2.0/src/App.vue\" target=\"_blank\" rel=\"noopener noreferrer\">2<OutboundLink/></a>).</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token comment\">// services/repoSnapshots.js (expanded)</span>\n<span class=\"token keyword\">import</span> firebase <span class=\"token keyword\">from</span> <span class=\"token string\">'firebase'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">subscribe</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">fn</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> firebase<span class=\"token punctuation\">.</span><span class=\"token function\">firestore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">collection</span><span class=\"token punctuation\">(</span><span class=\"token string\">'repo-snapshots'</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">orderBy</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"timestamp\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"desc\"</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">limit</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">onSnapshot</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">snapshot</span> <span class=\"token operator\">=></span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span>snapshot<span class=\"token punctuation\">.</span>docs<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">d</span> <span class=\"token operator\">=></span> d<span class=\"token punctuation\">.</span><span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// App.vue (&lt;script>)</span>\n<span class=\"token keyword\">import</span> repoSnapshots <span class=\"token keyword\">from</span> <span class=\"token string\">'./services/repoSnapshots.js'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">...</span>\n    <span class=\"token function-variable function\">data</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        snapshots<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">created</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        repoSnapshots<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">snapshots</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>snapshots <span class=\"token operator\">=</span> snapshots<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>As you can see, the code is insanely descriptive and easy. Although the documentation is not very complete, it takes some time to dig our the method I want. It is still very simple to use.</p>\n<h2 id=\"parcel-is-truly-awesome\"><a class=\"header-anchor\" href=\"#parcel-is-truly-awesome\">#</a> Parcel is truly awesome</h2>\n<p>Vue-cli 3.0 is absolutely amazing. But I think <a href=\"https://parceljs.org/\" target=\"_blank\" rel=\"noopener noreferrer\">Parcel<OutboundLink/></a> still is the winner for the most 0-config bundler. This project is so easily bootstrapped thanks to the very powerful Parcel! I don't ever need to worry about adding <code>sass-loader</code>/<code>vue-loader</code> or whatever loader. It just, do it for you! MAGIC!</p>\n<h1 id=\"anyways\"><a class=\"header-anchor\" href=\"#anyways\">#</a> Anyways,</h1>\n<p>I hope you are as excited as I am to see Vue out-starring React and enjoyed reading this post. Please feel free to ask me any questions I would definitely answer if I could. Thanks for reading!</p>\n"}},"context":{}}