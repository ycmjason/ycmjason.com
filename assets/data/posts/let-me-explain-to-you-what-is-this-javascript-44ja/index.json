{"hash":"fb5e2281a34daffe471e1a2f6dd51a0670497a49","data":{"post":{"title":"Let me explain to you what is `this`. (Javascript)","content":"<blockquote>\n<p>Original post: <a href=\"https://www.ycmjason.com/blog/2018/06/15.html\" target=\"_blank\" rel=\"noopener noreferrer\">https://www.ycmjason.com/blog/2018/06/15.html<OutboundLink/></a></p>\n<ul>\n<li>this article assumes 'use strict' in all context</li>\n<li>this article also assumes some knowledge about functions but still a bit confused</li>\n</ul>\n</blockquote>\n<p><code>this</code> in Javascript is the probably most magical keyword in the programming world. It's unpredictable nature has reached to an unprecedented level.</p>\n<p><img src=\"https://media0.giphy.com/media/MvedbKot538WY/giphy.gif\" alt=\"it's over 9000!!!\"></p>\n<p>However, it is essential to understand it fully if you wish to become a master of Javascript. So let me try to explain you <strong>what is <code>this</code></strong>. (if it doesn't work, well, at least I tried.)</p>\n<h2 id=\"functions\"><a class=\"header-anchor\" href=\"#functions\">#</a> Functions</h2>\n<p>Starting with functions. In this article, I would like to put functions into 3 different categories.</p>\n<ol>\n<li>Normal functions</li>\n<li>Arrow functions</li>\n<li>Bound functions</li>\n</ol>\n<h3 id=\"normal-functions\"><a class=\"header-anchor\" href=\"#normal-functions\">#</a> Normal functions</h3>\n<p>I define normal functions as any function created with...</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token comment\">// function declaration</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">magic</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// function expression</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">magic</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// (or if you hate your life)</span>\n<span class=\"token comment\">// function constructor</span>\n<span class=\"token keyword\">const</span> magic <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Function</span><span class=\"token punctuation\">(</span><span class=\"token string\">'...'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h3 id=\"arrow-functions\"><a class=\"header-anchor\" href=\"#arrow-functions\">#</a> Arrow functions</h3>\n<p>Arrow functions are basically the ES6 arrow functions:</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">magic</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h3 id=\"bound-functions\"><a class=\"header-anchor\" href=\"#bound-functions\">#</a> Bound functions</h3>\n<p>Bound functions can be created by calling <code>Function.prototype.bind</code> on a normal functions.</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token comment\">// magic is created with function declaration/expression/constructor</span>\n<span class=\"token keyword\">const</span> bound <span class=\"token operator\">=</span> <span class=\"token function\">magic</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p><img src=\"https://media2.giphy.com/media/zG6MKhlBxIloc/giphy.gif\" alt=\"\"></p>\n<h2 id=\"ways-to-call-a-function\"><a class=\"header-anchor\" href=\"#ways-to-call-a-function\">#</a> Ways to call a function</h2>\n<p>Now let's say we have a function <code>f</code> (any category). There are 2 ways to call it.</p>\n<ol>\n<li>Implicit (direct) calls</li>\n<li>Explicit calls</li>\n</ol>\n<h3 id=\"implicit-direct-calls\"><a class=\"header-anchor\" href=\"#implicit-direct-calls\">#</a> Implicit (direct) calls</h3>\n<p>Implicit (direct) calls are boring:</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token comment\">/* f is defined */</span>\n\n<span class=\"token comment\">// direct call</span>\n<span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// or attach it to an object and call it</span>\n<span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nobj<span class=\"token punctuation\">.</span>fn <span class=\"token operator\">=</span> f<span class=\"token punctuation\">;</span>\nobj<span class=\"token punctuation\">.</span><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h3 id=\"explicit-call\"><a class=\"header-anchor\" href=\"#explicit-call\">#</a> Explicit call</h3>\n<p>Explicit calls are more interesting. You can call your function with <code>Function.prototype.call</code> or <code>Function.prototype.apply</code>.</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token comment\">/* f is defined */</span>\n\n<span class=\"token comment\">// Function.prototype.call</span>\n<span class=\"token function\">f</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Function.prototype.apply</span>\n<span class=\"token function\">f</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p><img src=\"https://media0.giphy.com/media/3oEjI5VtIhHvK37WYo/giphy.gif\" alt=\"\"></p>\n<h2 id=\"quick-recap\"><a class=\"header-anchor\" href=\"#quick-recap\">#</a> Quick recap</h2>\n<p>Let's do a quick recap, we have 3 categories of functions:</p>\n<ol>\n<li>Normal functions - created with function declaration/expression/constructor</li>\n<li>Arrow functions - <code>() =&gt; {...}</code></li>\n<li>Bound functions - created with <code>f.bind(...)</code></li>\n</ol>\n<p>And 2 ways to call a function:</p>\n<ol>\n<li>Implicit (direct) calls - <code>f()</code> or <code>obj.f()</code></li>\n<li>Explicit calls - <code>f.call(...)</code> or <code>f.apply(...)</code></li>\n</ol>\n<p>This means we have 6 different scenarios.</p>\n<ol>\n<li>Normal functions + Implicit (direct) calls</li>\n<li>Normal functions + Explicit calls</li>\n<li>Arrow functions + Implicit (direct) calls</li>\n<li>Arrow functions + Explicit calls</li>\n<li>Bound functions + Implicit (direct) calls</li>\n<li>Bound functions + Explicit calls</li>\n</ol>\n<p><img src=\"https://media1.giphy.com/media/lKZEeXJGhU1d6/giphy.gif\" alt=\"\"></p>\n<p>Don't panic, it is not that scary.</p>\n<p>In fact, arrow functions and bound functions do not care about implicit/explicit calls. So this reduces down to only 4 scenarios:</p>\n<ol>\n<li>Normal functions + Implicit (direct) calls</li>\n<li>Normal functions + Explicit calls</li>\n<li>Arrow functions</li>\n<li>Bound functions</li>\n</ol>\n<h2 id=\"procedure-to-find-this\"><a class=\"header-anchor\" href=\"#procedure-to-find-this\">#</a> Procedure to find <code>this</code></h2>\n<p><img src=\"https://media3.giphy.com/media/O7pL1zfZKI836/giphy.gif\" alt=\"\">\nBelow is the procedure to find the binding of <code>this</code> in function <code>f</code>:\n<img src=\"https://thepracticaldev.s3.amazonaws.com/i/jbon851k9easj5ot8tte.png\" alt=\"\"></p>\n<h2 id=\"exercises\"><a class=\"header-anchor\" href=\"#exercises\">#</a> Exercises!</h2>\n<p>Given <code>magic</code> defined as follows:</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token string\">'use strict'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">magic</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// a. what is `this`?</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n\t<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">cool</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">// b. what is `this`?</span>\n\t    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">cool</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// QUESTION 1</span>\n<span class=\"token function\">magic</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token comment\">// QUESTION 2</span>\n<span class=\"token keyword\">const</span> apple <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'apple'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\napple<span class=\"token punctuation\">.</span>magic <span class=\"token operator\">=</span> magic<span class=\"token punctuation\">;</span>\napple<span class=\"token punctuation\">.</span><span class=\"token function\">magic</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// QUESTION 3</span>\n<span class=\"token keyword\">const</span> orange <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'orange'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">magic</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>orange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h3 id=\"question-1-a\"><a class=\"header-anchor\" href=\"#question-1-a\">#</a> QUESTION 1.a</h3>\n<p>Following flow chart, we want to find <code>this</code> in <code>magic</code>.</p>\n<ol>\n<li>Category of <code>magic</code> is normal function</li>\n<li><code>magic</code> is called implicitly (directly)</li>\n<li><code>magic</code> is called with <code>magic()</code></li>\n<li>So <code>this</code> = <code>undefined</code>!!!</li>\n</ol>\n<h3 id=\"question-1-b\"><a class=\"header-anchor\" href=\"#question-1-b\">#</a> QUESTION 1.b</h3>\n<p>Following flow chart, we want to find <code>this</code> in <code>cool</code>.</p>\n<ol>\n<li>Category of <code>cool</code> is arrow function</li>\n<li>From QUESTION 1.b, we know <code>magic</code>'s <code>this</code> is <code>undefined</code></li>\n<li><code>cool</code>'s definer is <code>magic</code></li>\n<li>So <code>this</code> = <code>magic</code>'s <code>this</code> = <code>undefined</code>!</li>\n</ol>\n<h2 id=\"lazy-lecturer\"><a class=\"header-anchor\" href=\"#lazy-lecturer\">#</a> Lazy lecturer</h2>\n<p>The remaining questions, QUESTION 2.a, 2.b, 3.a and 3.b, are trivial with my flow chart. So I will leave them as an exercise for you all.</p>\n<h2 id=\"answers\"><a class=\"header-anchor\" href=\"#answers\">#</a> Answers</h2>\n<p><a href=\"https://repl.it/@ycmjason/What-is-this\" target=\"_blank\" rel=\"noopener noreferrer\">https://repl.it/@ycmjason/What-is-this<OutboundLink/></a></p>\n<p>Click run and you will see the answer in order (1.a, 1.b, 2.a, 2.b, 3.a, 3.b).</p>\n<h2 id=\"note\"><a class=\"header-anchor\" href=\"#note\">#</a> Note</h2>\n<ul>\n<li>There is no &quot;bound arrow function&quot;. <code>(() =&gt; {...}).bind(...)</code> is still the original arrow function.</li>\n<li>For implicit calling, only the shape (<code>f()</code> or <code>obj.f()</code>) matter. It doesn't matter where <code>f</code> comes from. Consider the following code:</li>\n</ul>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">const</span> f <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">.</span>f<span class=\"token punctuation\">;</span> <span class=\"token comment\">// obj.f is a normal function</span>\n<span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// `this` in the body of `f` is `undefined`!!! not `obj`!!!</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><blockquote>\n<p>Updates:</p>\n</blockquote>\n<ul>\n<li>16 July 2018: Thanks to <a href=\"https://dev.to/joshcheek\" target=\"_blank\" rel=\"noopener noreferrer\">@joshcheek<OutboundLink/></a> for reminding me the correct binding of <code>this</code> of arrow functions!</li>\n<li>18 June 2018: Thanks to Yong for pointing out typo!</li>\n</ul>\n"}},"context":{}}