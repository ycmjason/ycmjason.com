{"hash":"9b6ca4610b21f075ec38828ce1b83169314e242d","data":{"post":{"title":"My point of \"vue\" in React vs. Vue","content":"<blockquote>\n<p>Original post: <a href=\"https://www.ycmjason.com/blog/2018/05/09.html\" target=\"_blank\" rel=\"noopener noreferrer\">https://www.ycmjason.com/blog/2018/05/09.html<OutboundLink/></a></p>\n</blockquote>\n<p>I personally consider the following when it comes to choosing frameworks/libraries.</p>\n<ol>\n<li>The capability of them</li>\n<li>The developing experience with them</li>\n</ol>\n<h2 id=\"capability\"><a class=\"header-anchor\" href=\"#capability\">#</a> Capability</h2>\n<p>For capability, both of them are capable of doing the same things. They both utilise the virtual dom. And have similar component concepts. One thing that Vue is capable of but not React is the <code>&lt;transition&gt;</code> component. This makes building animated UI a lot simpler and gives you more control over it. (See more <a href=\"https://vuejs.org/v2/guide/transitions.html\" target=\"_blank\" rel=\"noopener noreferrer\">https://vuejs.org/v2/guide/transitions.html<OutboundLink/></a>) In fact, due to Vue's capability with animations and transitions, I suspect this is the reason why Facebook built this site with Vue. (<a href=\"https://newsfeed.fb.com/?lang=en\" target=\"_blank\" rel=\"noopener noreferrer\">https://newsfeed.fb.com/?lang=en<OutboundLink/></a>)</p>\n<h2 id=\"developing-experience\"><a class=\"header-anchor\" href=\"#developing-experience\">#</a> Developing Experience</h2>\n<p>In terms of developing experience, I would say Vue has its advantages over React.</p>\n<h3 id=\"less-steep-learning-curve\"><a class=\"header-anchor\" href=\"#less-steep-learning-curve\">#</a> Less steep learning curve</h3>\n<p>It is generally agreed that Vue has a less steep learning curve. Mostly due to the excellently written documentation and guides and the simplicity of the framework.</p>\n<p>Furthermore, Vue is truly reactive. <code>this.a = &quot;hello world&quot;</code> would change the displaying text. Whereas in React, you have to do <code>this.setState((prevState, props) =&gt; {...})</code> which is not very intuitive.</p>\n<p>Vue is also easier to set up. vue-cli 3 provides a developer friendly interface to creating new projects. The project created has its development dependencies (e.g. testing frameworks, bundlers, linters...) installed as plugins. The philosophy behind this is to allow vue projects to stay up to date with the standards easily. Let's say one day Vue.js decided to use parcel, instead of webpack, as their recommended module bundler. Existing projects could switch to parcel seamlessly just by updating the <code>bundler-plugin</code> in their project without worrying about removing old stacks, installing new stacks and configuring them. (See this video about vue-cli 3.0: <a href=\"https://youtu.be/TRJMT9yjONQ?t=10m18s\" target=\"_blank\" rel=\"noopener noreferrer\">https://youtu.be/TRJMT9yjONQ?t=10m18s<OutboundLink/></a>)</p>\n<p>Vue is also very friendly to existing projects. You could use Vue in many ways, from including <code>&lt;script&gt;</code> tags to using bundlers like webpack/parcel/rollup. The fact that it is so flexible made Vue a great candidate to be included to existing projects without the need to introducing extra build steps.</p>\n<p>Gitlab is one of the companies that replaces part of their website with Vue components. Find out more in this article: <a href=\"https://about.gitlab.com/2016/10/20/why-we-chose-vue/\" target=\"_blank\" rel=\"noopener noreferrer\">https://about.gitlab.com/2016/10/20/why-we-chose-vue/<OutboundLink/></a></p>\n<h3 id=\"component-scoped-css-out-of-the-box\"><a class=\"header-anchor\" href=\"#component-scoped-css-out-of-the-box\">#</a> Component-scoped CSS out of the box</h3>\n<p>It might be possible with React as well, but the way Vue handles that is simple and straightforward. Hence better developing experience.</p>\n<h3 id=\"complete-separation-of-html-js-and-css\"><a class=\"header-anchor\" href=\"#complete-separation-of-html-js-and-css\">#</a> Complete separation of html, js and css</h3>\n<p>Although in the same file (<code>.vue</code>), the three sections are clearly and intuitively separated in three tags (<code>&lt;template&gt;</code>, <code>&lt;script&gt;</code> and <code>&lt;style&gt;</code>). It is very very unlikely that one would mix them. Whereas in React, due to JSX, one could easily mix these three together and produce less maintainable code. This very often reminds me of my early days coding in PHP when I haven't got enough experience. This problem could be solved by following good standards, but wouldn't it be easier for us to go for something where this problem could hardly happen?</p>\n<h3 id=\"vue-has-more-official-libraries\"><a class=\"header-anchor\" href=\"#vue-has-more-official-libraries\">#</a> Vue has more official libraries</h3>\n<p>Routers and Stores are two of the main features that is essential to developing a large scale application. React has <code>react-router</code> and <code>redux</code>, but neither of them are official libraries of React. (Redux has been added to the official library as Facebook recruited the creator of Redux.) On the other hand, Vue has <code>vue-router</code> and <code>vuex</code> which are official libraries.</p>\n<h2 id=\"well\"><a class=\"header-anchor\" href=\"#well\">#</a> Well...</h2>\n<p>I was a fan of Angular.js when it first came out. Then switched to Angular 2. Then started using React when Angular 2 turns out to be too complicated to use. Loved React + Redux. Many concepts from React Redux are truly inspiring. Then I discovered Vue.js last summer, and I fell in love. Currently an active contributor of an official Vue project VuePress. (<a href=\"https://github.com/vuejs/vuepress\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/vuejs/vuepress<OutboundLink/></a>)</p>\n<p>Some people prefer using JSX and &quot;do everything in Javscript&quot;. I respect their opinion but really hope that they make their decisions only after they have tried different alternatives. Otherwise you might miss out your next favourite thing.</p>\n"}},"context":{}}