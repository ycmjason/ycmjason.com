{"hash":"2179ee14470091bdc33197363501a61e90e840ca","data":{"post":{"title":"Building a Simple Virtual DOM from Scratch","content":"<div class=\"yt-container\">\n          <iframe class=\"yt-container__yt\" src=\"https://www.youtube.com/embed/85gJMUEcnkc\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n        </div>\n<p>I gave a live-coding talk last week at the <a href=\"https://www.meetup.com/Manchester-Web-Meetup/events/256037115\" target=\"_blank\" rel=\"noopener noreferrer\">Manchester Web Meetup #4<OutboundLink/></a>. I built a virtual DOM from scratch in less than an hour during the talk. It was the most technically complicated talk that I have ever given by far.</p>\n<p>The video of my talk is uploaded <a href=\"https://youtu.be/85gJMUEcnkc\" target=\"_blank\" rel=\"noopener noreferrer\">here<OutboundLink/></a>. This post is basically a typed-out version of my talk and aim to clarify extra bits that I haven't had time to mention in the talk. I would recommend watching the video before reading this. It would make things a little bit easier to follow.</p>\n<p>Here is the <a href=\"https://github.com/ycmjason-talks/2018-11-21-manc-web-meetup-4\" target=\"_blank\" rel=\"noopener noreferrer\">github repo<OutboundLink/></a> and the <a href=\"https://codesandbox.io/s/github/ycmjason-talks/2018-11-21-manc-web-meetup-4\" target=\"_blank\" rel=\"noopener noreferrer\">codesandbox<OutboundLink/></a> to the code that I wrote in the talk.</p>\n<h2 id=\"side-notes\"><a class=\"header-anchor\" href=\"#side-notes\">#</a> Side Notes</h2>\n<ul>\n<li>This article will prepend all variables with\n<ul>\n<li><code>$</code> - when referring to real doms, e.g. <code>$div</code>, <code>$el</code>, <code>$app</code></li>\n<li><code>v</code> - when referring to virtual doms, e.g. <code>vDiv</code>, <code>vEl</code>, <code>vApp</code></li>\n</ul>\n</li>\n<li>This article will be presented like an actual talk with progressive code adding here and there. Each section would have a codesandbox link showing the progress.</li>\n<li>This article is very very long. Probably take you more than half an hour to read. Make sure you got enough time before reading. Or consider watching the video first.</li>\n<li>If you spot any mistakes, please don't hesitate to point them out!</li>\n</ul>\n<h2 id=\"overview\"><a class=\"header-anchor\" href=\"#overview\">#</a> Overview</h2>\n<ul>\n<li><a href=\"#background-what-is-virtual-dom\">Background: What is Virtual DOM?</a></li>\n<li><a href=\"#setup\">Setup</a></li>\n<li><a href=\"#createelement-tagname-options\">createElement</a></li>\n<li><a href=\"#render-vnode\">render</a>\n<ul>\n<li><a href=\"#rendering-virtual-elements\">Rendering virtual elements</a></li>\n<li><a href=\"#elementnode-and-textnode\">ElementNode and TextNode</a></li>\n<li><a href=\"#extending-render-to-support-textnode\">Extending render to support TextNode</a></li>\n</ul>\n</li>\n<li><a href=\"#mount-node-target\">mount</a></li>\n<li><a href=\"#lets-make-our-app-more-interesting\">Let's make our app more interesting</a></li>\n<li><a href=\"#diff-oldvtree-newvtree\">diff</a>\n<ul>\n<li><a href=\"#diffattrs-oldattrs-newattrs\">diffAttrs</a></li>\n<li><a href=\"#diffchildren-oldvchildren-newvchildren\">diffChildren</a></li>\n</ul>\n</li>\n<li><a href=\"#make-our-app-more-complicated\">Make our app more complicated</a></li>\n</ul>\n<h2 id=\"background-what-is-virtual-dom\"><a class=\"header-anchor\" href=\"#background-what-is-virtual-dom\">#</a> Background: What is Virtual DOM?</h2>\n<p>Virtual DOMs usually refer to <strong>plain objects</strong> representing the actual <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model/Introduction\" target=\"_blank\" rel=\"noopener noreferrer\">DOM<OutboundLink/></a>s.</p>\n<blockquote>\n<p>The Document Object Model (DOM) is a programming interface for HTML documents.</p>\n</blockquote>\n<p>For example, when you do this:</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">const</span> $app <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'app'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>You will get the DOM for <code>&lt;div id=&quot;app&quot;&gt;&lt;/div&gt;</code> on the page. This DOM will have some programming interface for you to control it. For example:</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code>$app<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> <span class=\"token string\">'Hello world'</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>To make a plain object to represent <code>$app</code>, we can write something like this:</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">const</span> vApp <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  tagName<span class=\"token operator\">:</span> <span class=\"token string\">'div'</span><span class=\"token punctuation\">,</span>\n  attrs<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    id<span class=\"token operator\">:</span> <span class=\"token string\">'app'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h3 id=\"didn-t-mention-in-the-talk\"><a class=\"header-anchor\" href=\"#didn-t-mention-in-the-talk\">#</a> Didn't mention in the talk</h3>\n<p>There is no strict rule of how the virtual DOM should look like. You can call it <code>tagLabel</code> instead of <code>tagName</code>, or <code>props</code> instead of <code>attrs</code>. As soon as it represents the DOM, it is a &quot;virtual DOM&quot;.</p>\n<p>Virtual DOM will not have any of those programming interface. This is what makes them <strong>lightweight</strong> comparing to actual DOMs.</p>\n<p>However, keep in mind that since DOMs are the fundamental elements of the browser, most browsers must have done some serious optimisation to them. So actual DOMs might not be as slow as many people claim.</p>\n<h2 id=\"setup\"><a class=\"header-anchor\" href=\"#setup\">#</a> Setup</h2>\n<blockquote>\n<p><a href=\"https://codesandbox.io/s/7wqm7pv476?expanddevtools=1\" target=\"_blank\" rel=\"noopener noreferrer\">https://codesandbox.io/s/7wqm7pv476?expanddevtools=1<OutboundLink/></a></p>\n</blockquote>\n<p>We start of by creating and going into our project directory.</p>\n<!--beforebegin--><div class=\"language- extra-class\"><!--afterbegin--><pre v-pre class=\"language-text\"><code>$ mkdir /tmp/vdommm\n$ cd /tmp/vdommm\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>We will then initiate the git repo, create the <code>.gitignore</code> file with <a href=\"https://www.npmjs.com/package/gitignorer\" target=\"_blank\" rel=\"noopener noreferrer\">gitignorer<OutboundLink/></a> and initiate npm.</p>\n<!--beforebegin--><div class=\"language- extra-class\"><!--afterbegin--><pre v-pre class=\"language-text\"><code>$ git init\n$ gitignore init node\n$ npm init -y\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>Let's do out initial commit.</p>\n<!--beforebegin--><div class=\"language- extra-class\"><!--afterbegin--><pre v-pre class=\"language-text\"><code>$ git add -A\n$ git commit -am &#39;:tada: initial commit&#39;\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>Next, install <a href=\"https://parceljs.org/\" target=\"_blank\" rel=\"noopener noreferrer\">Parcel Bundler<OutboundLink/></a> the truly zero-configuration bundler. It supports all kinds of file format out of the box. It is always my choice of bundler in live-coding talks.</p>\n<!--beforebegin--><div class=\"language- extra-class\"><!--afterbegin--><pre v-pre class=\"language-text\"><code>$ npm install parcel-bundler\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>(Fun fact: you no longer need to pass <code>--save</code> anymore.)</p>\n<p>While this is installing, let's create some files in our project.</p>\n<p><strong>src/index.html</strong></p>\n<!--beforebegin--><div class=\"language-html extra-class\"><!--afterbegin--><pre v-pre class=\"language-html\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>hello world<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n    Hello world\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>./main.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p><strong>src/main.js</strong></p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">const</span> vApp <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  tagName<span class=\"token operator\">:</span> <span class=\"token string\">'div'</span><span class=\"token punctuation\">,</span>\n  attrs<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    id<span class=\"token operator\">:</span> <span class=\"token string\">'app'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>vApp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p><strong>package.json</strong></p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token punctuation\">{</span>\n  <span class=\"token operator\">...</span>\n  <span class=\"token string\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"dev\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"parcel src/index.html\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// add this script</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>Now you can spawn the development server by doing:</p>\n<!--beforebegin--><div class=\"language- extra-class\"><!--afterbegin--><pre v-pre class=\"language-text\"><code>$ npm run dev\n\n&gt; vdommm@0.0.1 dev /private/tmp/vdommm\n\n&gt; parcel src/index.html\n\n  \n\nServer running at http://localhost:1234\n\nBuilt in 959ms.\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>Going to <a href=\"http://localhost:1234\" target=\"_blank\" rel=\"noopener noreferrer\">http://localhost:1234<OutboundLink/></a> and you should see hello world on the page and the virtual DOM we defined in the console. If you see them, then you are correctly set up!</p>\n<h2 id=\"createelement-tagname-options\"><a class=\"header-anchor\" href=\"#createelement-tagname-options\">#</a> createElement (tagName, options)</h2>\n<blockquote>\n<p><a href=\"https://codesandbox.io/s/n9641jyo04?expanddevtools=1\" target=\"_blank\" rel=\"noopener noreferrer\">https://codesandbox.io/s/n9641jyo04?expanddevtools=1<OutboundLink/></a></p>\n</blockquote>\n<p>Most virtual DOM implementation will have this function called <code>createElement</code> function, often referred as <code>h</code>. These functions will simply return a &quot;virtual element&quot;. So let's implement that.</p>\n<p><strong>src/vdom/createElement.js</strong></p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">tagName<span class=\"token punctuation\">,</span> opts</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    tagName<span class=\"token punctuation\">,</span>\n    attrs<span class=\"token operator\">:</span> opts<span class=\"token punctuation\">.</span>attrs<span class=\"token punctuation\">,</span>\n    children<span class=\"token operator\">:</span> opts<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>With object destructuring we can write the above like this:</p>\n<p><strong>src/vdom/createElement.js</strong></p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">tagName<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> attrs<span class=\"token punctuation\">,</span> children <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    tagName<span class=\"token punctuation\">,</span>\n    attrs<span class=\"token punctuation\">,</span>\n    children<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>We should also allow creating elements without any options, so let's put some default values for out options.</p>\n<p><strong>src/vdom/createElement.js</strong></p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">tagName<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> attrs <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> children <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    tagName<span class=\"token punctuation\">,</span>\n    attrs<span class=\"token punctuation\">,</span>\n    children<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>Recall the virtual DOM that we created before:</p>\n<p><strong>src/main.js</strong></p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">const</span> vApp <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  tagName<span class=\"token operator\">:</span> <span class=\"token string\">'div'</span><span class=\"token punctuation\">,</span>\n  attrs<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    id<span class=\"token operator\">:</span> <span class=\"token string\">'app'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>vApp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>It now can be written as:</p>\n<p><strong>src/main.js</strong></p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">import</span> createElement <span class=\"token keyword\">from</span> <span class=\"token string\">'./vdom/createElement'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> vApp <span class=\"token operator\">=</span> <span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  attrs<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    id<span class=\"token operator\">:</span> <span class=\"token string\">'app'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>vApp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>Go back to the browser and you should see the same virtual dom as we defined previously. Let's add an image under the <code>div</code> sourcing from giphy:</p>\n<p><strong>src/main.js</strong></p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">import</span> createElement <span class=\"token keyword\">from</span> <span class=\"token string\">'./vdom/createElement'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> vApp <span class=\"token operator\">=</span> <span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  attrs<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    id<span class=\"token operator\">:</span> <span class=\"token string\">'app'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  children<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'img'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n      attrs<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        src<span class=\"token operator\">:</span> <span class=\"token string\">'https://media.giphy.com/media/cuPm4p4pClZVC/giphy.gif'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>vApp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>Go back to the browser and you should see the updated virtual DOM.</p>\n<h3 id=\"didn-t-mention-in-the-talk-2\"><a class=\"header-anchor\" href=\"#didn-t-mention-in-the-talk-2\">#</a> Didn't mention in the talk</h3>\n<p>Object literals (e.g. <code>{ a: 3 }</code>) automatically inherit from <code>Object</code>. This means that the object created by object literals will have methods defined in the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/prototype\" target=\"_blank\" rel=\"noopener noreferrer\"><code>Object.prototype</code><OutboundLink/></a> like <code>hasOwnProperty</code>, <code>toString</code>, etc.</p>\n<p>We could make our virtual DOM a little bit &quot;purer&quot; by using <code>Object.create(null)</code>. This will create a truly plain object that doesn't inherit from <code>Object</code> but <code>null</code> instead.</p>\n<p><strong>src/vdom/createElement.js</strong></p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">tagName<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> attrs<span class=\"token punctuation\">,</span> children <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> vElem <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span>vElem<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    tagName<span class=\"token punctuation\">,</span>\n    attrs<span class=\"token punctuation\">,</span>\n    children<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> vElem<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h2 id=\"render-vnode\"><a class=\"header-anchor\" href=\"#render-vnode\">#</a> render (vNode)</h2>\n<blockquote>\n<p><a href=\"https://codesandbox.io/s/pp9wnl5nj0?expanddevtools=1\" target=\"_blank\" rel=\"noopener noreferrer\">https://codesandbox.io/s/pp9wnl5nj0?expanddevtools=1<OutboundLink/></a></p>\n</blockquote>\n<h3 id=\"rendering-virtual-elements\"><a class=\"header-anchor\" href=\"#rendering-virtual-elements\">#</a> Rendering virtual elements</h3>\n<p>Now we got a function that generates virtual DOM for us. Next we need a way to translate our virtual DOM to real DOM. Let's define <code>render (vNode)</code> which will take in a virtual node and return the corresponding DOM.</p>\n<p><strong>src/vdom/render.js</strong></p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">render</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">vNode</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// create the element</span>\n  <span class=\"token comment\">//   e.g. &lt;div>&lt;/div></span>\n  <span class=\"token keyword\">const</span> $el <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span>vNode<span class=\"token punctuation\">.</span>tagName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \n  <span class=\"token comment\">// add all attributs as specified in vNode.attrs</span>\n  <span class=\"token comment\">//   e.g. &lt;div id=\"app\">&lt;/div></span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">]</span> <span class=\"token keyword\">of</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">entries</span><span class=\"token punctuation\">(</span>vNode<span class=\"token punctuation\">.</span>attrs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    $el<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// append all children as specified in vNode.children</span>\n  <span class=\"token comment\">//   e.g. &lt;div id=\"app\">&lt;img>&lt;/div></span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> child <span class=\"token keyword\">of</span> vNode<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    $el<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> $el<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> render<span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>The above code should be quite self-explanatory. I am more than happy to explain more tho if there is any request for it.</p>\n<hr>\n<h3 id=\"elementnode-and-textnode\"><a class=\"header-anchor\" href=\"#elementnode-and-textnode\">#</a> ElementNode and TextNode</h3>\n<p>In real DOM, there are <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Node/nodeType\" target=\"_blank\" rel=\"noopener noreferrer\">8 types of nodes<OutboundLink/></a>. In this article, we will only look at two types:</p>\n<ol>\n<li><code>ElementNode</code>, such as <code>&lt;div&gt;</code> and <code>&lt;img&gt;</code></li>\n<li><code>TextNode</code>, plain texts</li>\n</ol>\n<p>Our virtual element structure, <code>{ tagName, attrs, children }</code>, only represents the <code>ElementNode</code> in the DOM. So we need some representation for the <code>TextNode</code> as well. We will simply use <code>String</code> to represent <code>TextNode</code>.</p>\n<p>To demonstrate this, let's add some text to our current virtual DOM.</p>\n<p><strong>src/main.js</strong></p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">import</span> createElement <span class=\"token keyword\">from</span> <span class=\"token string\">'./vdom/createElement'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> vApp <span class=\"token operator\">=</span> <span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  attrs<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    id<span class=\"token operator\">:</span> <span class=\"token string\">'app'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  children<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token string\">'Hello world'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// represents TextNode</span>\n    <span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'img'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n      attrs<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        src<span class=\"token operator\">:</span> <span class=\"token string\">'https://media.giphy.com/media/cuPm4p4pClZVC/giphy.gif'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\">// represents ElementNode</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// represents ElementNode</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>vApp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><hr>\n<h3 id=\"extending-render-to-support-textnode\"><a class=\"header-anchor\" href=\"#extending-render-to-support-textnode\">#</a> Extending render to support TextNode</h3>\n<p>As I mentioned, we are considering two types of nodes. The current <code>render (vNode)</code> only only renders <code>ElementNode</code>. So let's extend <code>render</code> so that it supports rendering of <code>TextNode</code> too.</p>\n<p>We will first rename our existing function <code>renderElem</code> as it is what it does. I will also add object destructuring to make the code looks nicer.</p>\n<p><strong>src/vdom/render.js</strong></p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">renderElem</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> tagName<span class=\"token punctuation\">,</span> attrs<span class=\"token punctuation\">,</span> children<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// create the element</span>\n  <span class=\"token comment\">//   e.g. &lt;div>&lt;/div></span>\n  <span class=\"token keyword\">const</span> $el <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span>tagName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \n  <span class=\"token comment\">// add all attributs as specified in vNode.attrs</span>\n  <span class=\"token comment\">//   e.g. &lt;div id=\"app\">&lt;/div></span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">]</span> <span class=\"token keyword\">of</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">entries</span><span class=\"token punctuation\">(</span>attrs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    $el<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// append all children as specified in vNode.children</span>\n  <span class=\"token comment\">//   e.g. &lt;div id=\"app\">&lt;img>&lt;/div></span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> child <span class=\"token keyword\">of</span> children<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    $el<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> $el<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> render<span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>Let's redefine <code>render (vNode)</code>. We just need to check if <code>vNode</code> is a <code>String</code>. If it is then we can use <code>document.createTextNode(string)</code> to render the <code>textNode</code>. Otherwise, just call <code>renderElem(vNode)</code>.</p>\n<p><strong>src/vdom/render.js</strong></p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">renderElem</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> tagName<span class=\"token punctuation\">,</span> attrs<span class=\"token punctuation\">,</span> children<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// create the element</span>\n  <span class=\"token comment\">//   e.g. &lt;div>&lt;/div></span>\n  <span class=\"token keyword\">const</span> $el <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span>tagName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \n  <span class=\"token comment\">// add all attributs as specified in vNode.attrs</span>\n  <span class=\"token comment\">//   e.g. &lt;div id=\"app\">&lt;/div></span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">]</span> <span class=\"token keyword\">of</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">entries</span><span class=\"token punctuation\">(</span>attrs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    $el<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// append all children as specified in vNode.children</span>\n  <span class=\"token comment\">//   e.g. &lt;div id=\"app\">&lt;img>&lt;/div></span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> child <span class=\"token keyword\">of</span> children<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    $el<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> $el<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">render</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">vNode</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> vNode <span class=\"token operator\">===</span> <span class=\"token string\">'string'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createTextNode</span><span class=\"token punctuation\">(</span>vNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  \n  <span class=\"token comment\">// we assume everything else to be a virtual element</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">renderElem</span><span class=\"token punctuation\">(</span>vNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> render<span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>Now our <code>render (vNode)</code> function is capable of rendering two types of virtual nodes:</p>\n<ol>\n<li>Virtual Elements - created with our <code>createElement</code> function</li>\n<li>Virtual Texts - represented by strings</li>\n</ol>\n<hr>\n<h3 id=\"render-our-vapp\"><a class=\"header-anchor\" href=\"#render-our-vapp\">#</a> Render our <code>vApp</code>!</h3>\n<p>Now let's try to render our <code>vApp</code> and <code>console.log</code> it!</p>\n<p><strong>src/main.js</strong></p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">import</span> createElement <span class=\"token keyword\">from</span> <span class=\"token string\">'./vdom/createElement'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> render <span class=\"token keyword\">from</span> <span class=\"token string\">'./vdom/render'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> vApp <span class=\"token operator\">=</span> <span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  attrs<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    id<span class=\"token operator\">:</span> <span class=\"token string\">'app'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  children<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token string\">'Hello world'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'img'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n      attrs<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        src<span class=\"token operator\">:</span> <span class=\"token string\">'https://media.giphy.com/media/cuPm4p4pClZVC/giphy.gif'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> $app <span class=\"token operator\">=</span> <span class=\"token function\">render</span><span class=\"token punctuation\">(</span>vApp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>$app<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>Go to the browser and you would see the console showing the DOM for:</p>\n<!--beforebegin--><div class=\"language-html extra-class\"><!--afterbegin--><pre v-pre class=\"language-html\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>app<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  Hello world\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>https://media.giphy.com/media/cuPm4p4pClZVC/giphy.gif<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h2 id=\"mount-node-target\"><a class=\"header-anchor\" href=\"#mount-node-target\">#</a> mount ($node, $target)</h2>\n<blockquote>\n<p><a href=\"https://codesandbox.io/s/vjpk91op47\" target=\"_blank\" rel=\"noopener noreferrer\">https://codesandbox.io/s/vjpk91op47<OutboundLink/></a></p>\n</blockquote>\n<p>We are now able to create our virtual DOM and render it to real DOM. Next we would need to put our real DOM on the page.</p>\n<p>Let's first create a mounting point for our app. I will replace the <code>Hello world</code> on the <code>src/index.html</code> with <code>&lt;div id=&quot;app&quot;&gt;&lt;/div&gt;</code>.</p>\n<p><strong>src/index.html</strong></p>\n<!--beforebegin--><div class=\"language-html extra-class\"><!--afterbegin--><pre v-pre class=\"language-html\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>hello world<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>app<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>./main.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>What we want to do now is to replace this empty <code>div</code> with our rendered <code>$app</code>. This is super easy to do if we ignore Internet Explorer and Safari. We can just use <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/ChildNode/replaceWith\" target=\"_blank\" rel=\"noopener noreferrer\"><code>ChildNode.replaceWith</code><OutboundLink/></a>.</p>\n<p>Let's define <code>mount ($node, $target)</code>. This function will simply replace <code>$target</code> with <code>$node</code> and return <code>$node</code>.</p>\n<p><strong>src/vdom/mount.js</strong></p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">$node<span class=\"token punctuation\">,</span> $target</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  $target<span class=\"token punctuation\">.</span><span class=\"token function\">replaceWith</span><span class=\"token punctuation\">(</span>$node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> $node<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>Now in our <strong>main.js</strong> simply mount our <code>$app</code> to the empty div.</p>\n<p><strong>src/main.js</strong></p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">import</span> createElement <span class=\"token keyword\">from</span> <span class=\"token string\">'./vdom/createElement'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> render <span class=\"token keyword\">from</span> <span class=\"token string\">'./vdom/render'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> mount <span class=\"token keyword\">from</span> <span class=\"token string\">'./vdom/mount'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> vApp <span class=\"token operator\">=</span> <span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  attrs<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    id<span class=\"token operator\">:</span> <span class=\"token string\">'app'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  children<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token string\">'Hello world'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'img'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n      attrs<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        src<span class=\"token operator\">:</span> <span class=\"token string\">'https://media.giphy.com/media/cuPm4p4pClZVC/giphy.gif'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> $app <span class=\"token operator\">=</span> <span class=\"token function\">render</span><span class=\"token punctuation\">(</span>vApp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">mount</span><span class=\"token punctuation\">(</span>$app<span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'app'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>Our app will show on the page now and we should see a cat on the page.</p>\n<h2 id=\"let-s-make-our-app-more-interesting\"><a class=\"header-anchor\" href=\"#let-s-make-our-app-more-interesting\">#</a> Let's make our app more interesting</h2>\n<blockquote>\n<p><a href=\"https://codesandbox.io/s/ox02294zo5\" target=\"_blank\" rel=\"noopener noreferrer\">https://codesandbox.io/s/ox02294zo5<OutboundLink/></a></p>\n</blockquote>\n<p>Now let's make our app more interesting. We will wrap our <code>vApp</code> in a function called <code>createVApp</code>. It will then take in a <code>count</code> which then the <code>vApp</code> will use it.</p>\n<p><strong>src/main.js</strong></p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">import</span> createElement <span class=\"token keyword\">from</span> <span class=\"token string\">'./vdom/createElement'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> render <span class=\"token keyword\">from</span> <span class=\"token string\">'./vdom/render'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> mount <span class=\"token keyword\">from</span> <span class=\"token string\">'./vdom/mount'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">createVApp</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">count</span> <span class=\"token operator\">=></span> <span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  attrs<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    id<span class=\"token operator\">:</span> <span class=\"token string\">'app'</span><span class=\"token punctuation\">,</span>\n    dataCount<span class=\"token operator\">:</span> count<span class=\"token punctuation\">,</span> <span class=\"token comment\">// we use the count here</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  children<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token string\">'The current count is: '</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">String</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// and here</span>\n    <span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'img'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n      attrs<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        src<span class=\"token operator\">:</span> <span class=\"token string\">'https://media.giphy.com/media/cuPm4p4pClZVC/giphy.gif'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> vApp <span class=\"token operator\">=</span> <span class=\"token function\">createVApp</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> $app <span class=\"token operator\">=</span> <span class=\"token function\">render</span><span class=\"token punctuation\">(</span>vApp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">mount</span><span class=\"token punctuation\">(</span>$app<span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'app'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>Then, we will <code>setInterval</code> to increment the count every second and create, render and mount our app again on the page.</p>\n<p><strong>src/main.js</strong></p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">import</span> createElement <span class=\"token keyword\">from</span> <span class=\"token string\">'./vdom/createElement'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> render <span class=\"token keyword\">from</span> <span class=\"token string\">'./vdom/render'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> mount <span class=\"token keyword\">from</span> <span class=\"token string\">'./vdom/mount'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">createVApp</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">count</span> <span class=\"token operator\">=></span> <span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  attrs<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    id<span class=\"token operator\">:</span> <span class=\"token string\">'app'</span><span class=\"token punctuation\">,</span>\n    dataCount<span class=\"token operator\">:</span> count<span class=\"token punctuation\">,</span> <span class=\"token comment\">// we use the count here</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  children<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token string\">'The current count is: '</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">String</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// and here</span>\n    <span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'img'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n      attrs<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        src<span class=\"token operator\">:</span> <span class=\"token string\">'https://media.giphy.com/media/cuPm4p4pClZVC/giphy.gif'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> vApp <span class=\"token operator\">=</span> <span class=\"token function\">createVApp</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> $app <span class=\"token operator\">=</span> <span class=\"token function\">render</span><span class=\"token punctuation\">(</span>vApp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> $rootEl <span class=\"token operator\">=</span> <span class=\"token function\">mount</span><span class=\"token punctuation\">(</span>$app<span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'app'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n  $rootEl <span class=\"token operator\">=</span> <span class=\"token function\">mount</span><span class=\"token punctuation\">(</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token function\">createVApp</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> $rootEl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>Note that I used <code>$rootEl</code> to keep track of the root element. So that <code>mount</code> knows where to mount our new app.</p>\n<p>If we go back to the browser now, we should see the count increment every second by 1 and works perfectly!</p>\n<p>We now gain the power to declaratively create our application. The application is rendered predictably and is very very easy to reason about. If you know how things are done in the JQuery way, you will appreciate how much cleaner this approach is.</p>\n<p>However, there are a couple of problems with re-rendering the whole application every second:</p>\n<ol>\n<li>Real DOM are much heavier than virtual DOM. Rendering the whole application to real DOM can be expensive.</li>\n<li>Elements will lose their states. For example, <code>&lt;input&gt;</code> will lose their focus whenever the application re-mount to the page. See live demo <a href=\"https://codesandbox.io/s/6l1v8lwj5k\" target=\"_blank\" rel=\"noopener noreferrer\">here<OutboundLink/></a>.</li>\n</ol>\n<p>We will solve these problems in the next section.</p>\n<h2 id=\"diff-oldvtree-newvtree\"><a class=\"header-anchor\" href=\"#diff-oldvtree-newvtree\">#</a> diff (oldVTree, newVTree)</h2>\n<blockquote>\n<p><a href=\"https://codesandbox.io/s/0xv007yqnv\" target=\"_blank\" rel=\"noopener noreferrer\">https://codesandbox.io/s/0xv007yqnv<OutboundLink/></a></p>\n</blockquote>\n<p>Imagine we have a function <code>diff (oldVTree, newVTree)</code> which calculate the differences between the two virtual trees; return a <code>patch</code> function that takes in the real DOM of <code>oldVTree</code> and perform appropriate operations to the real DOM to make the real DOM looks like the <code>newVTree</code>.</p>\n<p>If we have that <code>diff</code> function, then we could just re-write our interval to become:</p>\n<p><strong>src/main.js</strong></p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">import</span> createElement <span class=\"token keyword\">from</span> <span class=\"token string\">'./vdom/createElement'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> render <span class=\"token keyword\">from</span> <span class=\"token string\">'./vdom/render'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> mount <span class=\"token keyword\">from</span> <span class=\"token string\">'./vdom/mount'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> diff <span class=\"token keyword\">from</span> <span class=\"token string\">'./vdom/diff'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">createVApp</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">count</span> <span class=\"token operator\">=></span> <span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  attrs<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    id<span class=\"token operator\">:</span> <span class=\"token string\">'app'</span><span class=\"token punctuation\">,</span>\n    dataCount<span class=\"token operator\">:</span> count<span class=\"token punctuation\">,</span> <span class=\"token comment\">// we use the count here</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  children<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token string\">'The current count is: '</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">String</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// and here</span>\n    <span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'img'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n      attrs<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        src<span class=\"token operator\">:</span> <span class=\"token string\">'https://media.giphy.com/media/cuPm4p4pClZVC/giphy.gif'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> vApp <span class=\"token operator\">=</span> <span class=\"token function\">createVApp</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> $app <span class=\"token operator\">=</span> <span class=\"token function\">render</span><span class=\"token punctuation\">(</span>vApp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> $rootEl <span class=\"token operator\">=</span> <span class=\"token function\">mount</span><span class=\"token punctuation\">(</span>$app<span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'app'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> vNewApp <span class=\"token operator\">=</span> <span class=\"token function\">createVApp</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> patch <span class=\"token operator\">=</span> <span class=\"token function\">diff</span><span class=\"token punctuation\">(</span>vApp<span class=\"token punctuation\">,</span> vNewApp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \n  <span class=\"token comment\">// we might replace the whole $rootEl,</span>\n  <span class=\"token comment\">// so we want the patch will return the new $rootEl</span>\n  $rootEl <span class=\"token operator\">=</span> <span class=\"token function\">patch</span><span class=\"token punctuation\">(</span>$rootEl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  vApp <span class=\"token operator\">=</span> vNewApp<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>So let's try to implement this <code>diff (oldVTree, newVTree)</code>. Let's start with some easy cases:</p>\n<ol>\n<li><code>newVTree</code> is <code>undefined</code>\n<ul>\n<li>we can simply remove the <code>$node</code> passing into the <code>patch</code> then!</li>\n</ul>\n</li>\n<li>They are both TextNode (string)\n<ul>\n<li>If they are the same string, then do nothing.</li>\n<li>If they are not, replace <code>$node</code> with <code>render(newVTree)</code>.</li>\n</ul>\n</li>\n<li>One of the tree is TextNode, the other one is ElementNode\n<ul>\n<li>In that case they are obviously not the same thing, then we will replace <code>$node</code> with <code>render(newVTree)</code>.</li>\n</ul>\n</li>\n<li><code>oldVTree.tagName !== newVTree.tagName</code>\n<ul>\n<li>we assume that in this case, the old and new trees are totally different.</li>\n<li>instead of trying to find the differences between two trees, we will just replace the <code>$node</code> with <code>render(newVTree)</code>.</li>\n<li>this assumption also exists in react. (<a href=\"https://reactjs.org/docs/reconciliation.html#motivation\" target=\"_blank\" rel=\"noopener noreferrer\">source<OutboundLink/></a>)</li>\n<li>\n<blockquote>\n<p>Two elements of different types will produce different trees.</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ol>\n<p><strong>src/vdom/diff.js</strong></p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">import</span> render <span class=\"token keyword\">from</span> <span class=\"token string\">'./render'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">diff</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">oldVTree<span class=\"token punctuation\">,</span> newVTree</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// let's assume oldVTree is not undefined!</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>newVTree <span class=\"token operator\">===</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token parameter\">$node</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      $node<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token comment\">// the patch should return the new root node.</span>\n      <span class=\"token comment\">// since there is none in this case,</span>\n      <span class=\"token comment\">// we will just return undefined.</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> oldVTree <span class=\"token operator\">===</span> <span class=\"token string\">'string'</span> <span class=\"token operator\">||</span>\n    <span class=\"token keyword\">typeof</span> newVTree <span class=\"token operator\">===</span> <span class=\"token string\">'string'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>oldVTree <span class=\"token operator\">!==</span> newVTree<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// could be 2 cases:</span>\n      <span class=\"token comment\">// 1. both trees are string and they have different values</span>\n      <span class=\"token comment\">// 2. one of the trees is text node and</span>\n      <span class=\"token comment\">//    the other one is elem node</span>\n      <span class=\"token comment\">// Either case, we will just render(newVTree)!</span>\n      <span class=\"token keyword\">return</span> <span class=\"token parameter\">$node</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t     <span class=\"token keyword\">const</span> $newNode <span class=\"token operator\">=</span> <span class=\"token function\">render</span><span class=\"token punctuation\">(</span>newVTree<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t     $node<span class=\"token punctuation\">.</span><span class=\"token function\">replaceWith</span><span class=\"token punctuation\">(</span>$newNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t     <span class=\"token keyword\">return</span> $newNode<span class=\"token punctuation\">;</span>\n\t   <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// this means that both trees are string</span>\n      <span class=\"token comment\">// and they have the same values</span>\n      <span class=\"token keyword\">return</span> <span class=\"token parameter\">$node</span> <span class=\"token operator\">=></span> $node<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>oldVTree<span class=\"token punctuation\">.</span>tagName <span class=\"token operator\">!==</span> newVTree<span class=\"token punctuation\">.</span>tagName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// we assume that they are totally different and </span>\n    <span class=\"token comment\">// will not attempt to find the differences.</span>\n    <span class=\"token comment\">// simply render the newVTree and mount it.</span>\n    <span class=\"token keyword\">return</span> <span class=\"token parameter\">$node</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> $newNode <span class=\"token operator\">=</span> <span class=\"token function\">render</span><span class=\"token punctuation\">(</span>newVTree<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      $node<span class=\"token punctuation\">.</span><span class=\"token function\">replaceWith</span><span class=\"token punctuation\">(</span>$newNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> $newNode<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// (A)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> diff<span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>If the code reaches <code>(A)</code>, it implies the following:</p>\n<ol>\n<li><code>oldVTree</code> and <code>newVTree</code> are both virtual elements.</li>\n<li>They have the same <code>tagName</code>.</li>\n<li>They might have different <code>attrs</code> and <code>children</code>.</li>\n</ol>\n<p>We will implement two functions to deal with the attributes and children separately, namely <code>diffAttrs (oldAttrs, newAttrs)</code> and <code>diffChildren (oldVChildren, newVChildren)</code>, which will return a patch separately. As we know at this point we are not going to replace <code>$node</code>, we can safely return <code>$node</code> after applying both patches.</p>\n<p><strong>src/vdom/diff.js</strong></p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">import</span> render <span class=\"token keyword\">from</span> <span class=\"token string\">'./render'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">diffAttrs</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">oldAttrs<span class=\"token punctuation\">,</span> newAttrs</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token parameter\">$node</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> $node<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">diffChildren</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">oldVChildren<span class=\"token punctuation\">,</span> newVChildren</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token parameter\">$node</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> $node<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">diff</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">oldVTree<span class=\"token punctuation\">,</span> newVTree</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// let's assume oldVTree is not undefined!</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>newVTree <span class=\"token operator\">===</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token parameter\">$node</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      $node<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token comment\">// the patch should return the new root node.</span>\n      <span class=\"token comment\">// since there is none in this case,</span>\n      <span class=\"token comment\">// we will just return undefined.</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> oldVTree <span class=\"token operator\">===</span> <span class=\"token string\">'string'</span> <span class=\"token operator\">||</span>\n    <span class=\"token keyword\">typeof</span> newVTree <span class=\"token operator\">===</span> <span class=\"token string\">'string'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>oldVTree <span class=\"token operator\">!==</span> newVTree<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// could be 2 cases:</span>\n      <span class=\"token comment\">// 1. both trees are string and they have different values</span>\n      <span class=\"token comment\">// 2. one of the trees is text node and</span>\n      <span class=\"token comment\">//    the other one is elem node</span>\n      <span class=\"token comment\">// Either case, we will just render(newVTree)!</span>\n      <span class=\"token keyword\">return</span> <span class=\"token parameter\">$node</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t     <span class=\"token keyword\">const</span> $newNode <span class=\"token operator\">=</span> <span class=\"token function\">render</span><span class=\"token punctuation\">(</span>newVTree<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t     $node<span class=\"token punctuation\">.</span><span class=\"token function\">replaceWith</span><span class=\"token punctuation\">(</span>$newNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t     <span class=\"token keyword\">return</span> $newNode<span class=\"token punctuation\">;</span>\n\t   <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// this means that both trees are string</span>\n      <span class=\"token comment\">// and they have the same values</span>\n      <span class=\"token keyword\">return</span> <span class=\"token parameter\">$node</span> <span class=\"token operator\">=></span> $node<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>oldVTree<span class=\"token punctuation\">.</span>tagName <span class=\"token operator\">!==</span> newVTree<span class=\"token punctuation\">.</span>tagName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// we assume that they are totally different and </span>\n    <span class=\"token comment\">// will not attempt to find the differences.</span>\n    <span class=\"token comment\">// simply render the newVTree and mount it.</span>\n    <span class=\"token keyword\">return</span> <span class=\"token parameter\">$node</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> $newNode <span class=\"token operator\">=</span> <span class=\"token function\">render</span><span class=\"token punctuation\">(</span>newVTree<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      $node<span class=\"token punctuation\">.</span><span class=\"token function\">replaceWith</span><span class=\"token punctuation\">(</span>$newNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> $newNode<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">const</span> patchAttrs <span class=\"token operator\">=</span> <span class=\"token function\">diffAttrs</span><span class=\"token punctuation\">(</span>oldVTree<span class=\"token punctuation\">.</span>attrs<span class=\"token punctuation\">,</span> newVTree<span class=\"token punctuation\">.</span>attrs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> patchChildren <span class=\"token operator\">=</span> <span class=\"token function\">diffChildren</span><span class=\"token punctuation\">(</span>oldVTree<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">,</span> newVTree<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token parameter\">$node</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">patchAttrs</span><span class=\"token punctuation\">(</span>$node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">patchChildren</span><span class=\"token punctuation\">(</span>$node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> $node<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> diff<span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h3 id=\"diffattrs-oldattrs-newattrs\"><a class=\"header-anchor\" href=\"#diffattrs-oldattrs-newattrs\">#</a> diffAttrs (oldAttrs, newAttrs)</h3>\n<p>Let's first focus on the <code>diffAttrs</code>. It is actually pretty easy. We know that we are going to set everything in <code>newAttrs</code>. After setting them, we just need to go through all the keys in <code>oldAttrs</code> and make sure they all exist in <code>newAttrs</code> too. If not, remove them.</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">diffAttrs</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">oldAttrs<span class=\"token punctuation\">,</span> newAttrs</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> patches <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// setting newAttrs</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">]</span> <span class=\"token keyword\">of</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">entries</span><span class=\"token punctuation\">(</span>newAttrs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    patches<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">$node</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      $node<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> $node<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// removing attrs</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> k <span class=\"token keyword\">in</span> oldAttrs<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>k <span class=\"token keyword\">in</span> newAttrs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      patches<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">$node</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        $node<span class=\"token punctuation\">.</span><span class=\"token function\">removeAttribute</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> $node<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  \n  <span class=\"token keyword\">return</span> <span class=\"token parameter\">$node</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> patch <span class=\"token keyword\">of</span> patches<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">patch</span><span class=\"token punctuation\">(</span>$node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> $node<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>Notice how we create a wrapper patch and loop through the <code>patches</code> to apply them.</p>\n<h3 id=\"diffchildren-oldvchildren-newvchildren\"><a class=\"header-anchor\" href=\"#diffchildren-oldvchildren-newvchildren\">#</a> diffChildren (oldVChildren, newVChildren)</h3>\n<p>Children would be a little bit more complicated. We can consider three cases:</p>\n<ol>\n<li><code>oldVChildren.length === newVChildren.length</code>\n<ul>\n<li>we can do <code>diff(oldVChildren[i], newVChildren[i])</code>\nwhere <code>i</code> goes from <code>0</code> to <code>oldVChildren.length</code>.</li>\n</ul>\n</li>\n<li><code>oldVChildren.length &gt; newVChildren.length</code>\n<ul>\n<li>we can also do <code>diff(oldVChildren[i], newVChildren[i])</code>\nwhere <code>i</code>  goes from <code>0</code> to <code>oldVChildren.length</code>.</li>\n<li><code>newVChildren[j]</code> will be <code>undefined</code> for <code>j &gt;= newVChildren.length</code></li>\n<li>But this is fine, because our <code>diff</code> can handle <code>diff(vNode, undefined)</code>!</li>\n</ul>\n</li>\n<li><code>oldVChildren.length &lt; newVChildren.length</code>\n<ul>\n<li>we can also do <code>diff(oldVChildren[i], newVChildren[i])</code>\nwhere <code>i</code> goes from <code>0</code> to <code>oldVChildren.length</code>.</li>\n<li>this loop will create patches for each already existing children</li>\n<li>we just need to create the remaining additional children i.e. <code>newVChildren.slice(oldVChildren.length)</code>.</li>\n</ul>\n</li>\n</ol>\n<p>To conclude, we loop through <code>oldVChildren</code> regardless and we will call <code>diff(oldVChildren[i], newVChildren[i])</code>.</p>\n<p>Then we will render the additional children (if any), and append them to the <code>$node</code>.</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">diffChildren</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">oldVChildren<span class=\"token punctuation\">,</span> newVChildren</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> childPatches <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  oldVChildren<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">oldVChild<span class=\"token punctuation\">,</span> i</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    childPatches<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token function\">diff</span><span class=\"token punctuation\">(</span>oldVChild<span class=\"token punctuation\">,</span> newVChildren<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> additionalPatches <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> additionalVChild <span class=\"token keyword\">of</span> newVChildren<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span>oldVChildren<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    additionalPatches<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">$node</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      $node<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>newVChildren<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> $node<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token parameter\">$parent</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// since childPatches are expecting the $child, not $parent,</span>\n    <span class=\"token comment\">// we cannot just loop through them and call patch($parent)</span>\n    $parent<span class=\"token punctuation\">.</span>childNodes<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">$child<span class=\"token punctuation\">,</span> i</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      childPatches<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>$child<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> patch <span class=\"token keyword\">of</span> additionalPatches<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">patch</span><span class=\"token punctuation\">(</span>$parent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> $parent<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>I think it is a little bit more elegant if we use the <code>zip</code> function.</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">import</span> render <span class=\"token keyword\">from</span> <span class=\"token string\">'./render'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">zip</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">xs<span class=\"token punctuation\">,</span> ys</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> zipped <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>xs<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">,</span> ys<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    zipped<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>xs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> ys<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> zipped<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">diffChildren</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">oldVChildren<span class=\"token punctuation\">,</span> newVChildren</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> childPatches <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  oldVChildren<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">oldVChild<span class=\"token punctuation\">,</span> i</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    childPatches<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token function\">diff</span><span class=\"token punctuation\">(</span>oldVChild<span class=\"token punctuation\">,</span> newVChildren<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> additionalPatches <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> additionalVChild <span class=\"token keyword\">of</span> newVChildren<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span>oldVChildren<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    additionalPatches<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">$node</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      $node<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>additionalVChild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> $node<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token parameter\">$parent</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// since childPatches are expecting the $child, not $parent,</span>\n    <span class=\"token comment\">// we cannot just loop through them and call patch($parent)</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>patch<span class=\"token punctuation\">,</span> $child<span class=\"token punctuation\">]</span> <span class=\"token keyword\">of</span> <span class=\"token function\">zip</span><span class=\"token punctuation\">(</span>childPatches<span class=\"token punctuation\">,</span> $parent<span class=\"token punctuation\">.</span>childNodes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">patch</span><span class=\"token punctuation\">(</span>$child<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> patch <span class=\"token keyword\">of</span> additionalPatches<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">patch</span><span class=\"token punctuation\">(</span>$parent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> $parent<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h3 id=\"finalised-diff-js\"><a class=\"header-anchor\" href=\"#finalised-diff-js\">#</a> Finalised diff.js</h3>\n<p><strong>src/vdom/diff.js</strong></p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">import</span> render <span class=\"token keyword\">from</span> <span class=\"token string\">'./render'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">zip</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">xs<span class=\"token punctuation\">,</span> ys</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> zipped <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>xs<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">,</span> ys<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    zipped<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>xs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> ys<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> zipped<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">diffAttrs</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">oldAttrs<span class=\"token punctuation\">,</span> newAttrs</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> patches <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// setting newAttrs</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">]</span> <span class=\"token keyword\">of</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">entries</span><span class=\"token punctuation\">(</span>newAttrs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    patches<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">$node</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      $node<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> $node<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// removing attrs</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> k <span class=\"token keyword\">in</span> oldAttrs<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>k <span class=\"token keyword\">in</span> newAttrs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      patches<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">$node</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        $node<span class=\"token punctuation\">.</span><span class=\"token function\">removeAttribute</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> $node<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  \n  <span class=\"token keyword\">return</span> <span class=\"token parameter\">$node</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> patch <span class=\"token keyword\">of</span> patches<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">patch</span><span class=\"token punctuation\">(</span>$node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> $node<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">diffChildren</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">oldVChildren<span class=\"token punctuation\">,</span> newVChildren</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> childPatches <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  oldVChildren<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">oldVChild<span class=\"token punctuation\">,</span> i</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    childPatches<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token function\">diff</span><span class=\"token punctuation\">(</span>oldVChild<span class=\"token punctuation\">,</span> newVChildren<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> additionalPatches <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> additionalVChild <span class=\"token keyword\">of</span> newVChildren<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span>oldVChildren<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    additionalPatches<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">$node</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      $node<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>additionalVChild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> $node<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token parameter\">$parent</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// since childPatches are expecting the $child, not $parent,</span>\n    <span class=\"token comment\">// we cannot just loop through them and call patch($parent)</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>patch<span class=\"token punctuation\">,</span> $child<span class=\"token punctuation\">]</span> <span class=\"token keyword\">of</span> <span class=\"token function\">zip</span><span class=\"token punctuation\">(</span>childPatches<span class=\"token punctuation\">,</span> $parent<span class=\"token punctuation\">.</span>childNodes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">patch</span><span class=\"token punctuation\">(</span>$child<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> patch <span class=\"token keyword\">of</span> additionalPatches<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">patch</span><span class=\"token punctuation\">(</span>$parent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> $parent<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">diff</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">oldVTree<span class=\"token punctuation\">,</span> newVTree</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// let's assume oldVTree is not undefined!</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>newVTree <span class=\"token operator\">===</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token parameter\">$node</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      $node<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token comment\">// the patch should return the new root node.</span>\n      <span class=\"token comment\">// since there is none in this case,</span>\n      <span class=\"token comment\">// we will just return undefined.</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> oldVTree <span class=\"token operator\">===</span> <span class=\"token string\">'string'</span> <span class=\"token operator\">||</span>\n    <span class=\"token keyword\">typeof</span> newVTree <span class=\"token operator\">===</span> <span class=\"token string\">'string'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>oldVTree <span class=\"token operator\">!==</span> newVTree<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// could be 2 cases:</span>\n      <span class=\"token comment\">// 1. both trees are string and they have different values</span>\n      <span class=\"token comment\">// 2. one of the trees is text node and</span>\n      <span class=\"token comment\">//    the other one is elem node</span>\n      <span class=\"token comment\">// Either case, we will just render(newVTree)!</span>\n      <span class=\"token keyword\">return</span> <span class=\"token parameter\">$node</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t     <span class=\"token keyword\">const</span> $newNode <span class=\"token operator\">=</span> <span class=\"token function\">render</span><span class=\"token punctuation\">(</span>newVTree<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t     $node<span class=\"token punctuation\">.</span><span class=\"token function\">replaceWith</span><span class=\"token punctuation\">(</span>$newNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t     <span class=\"token keyword\">return</span> $newNode<span class=\"token punctuation\">;</span>\n\t   <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// this means that both trees are string</span>\n      <span class=\"token comment\">// and they have the same values</span>\n      <span class=\"token keyword\">return</span> <span class=\"token parameter\">$node</span> <span class=\"token operator\">=></span> $node<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>oldVTree<span class=\"token punctuation\">.</span>tagName <span class=\"token operator\">!==</span> newVTree<span class=\"token punctuation\">.</span>tagName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// we assume that they are totally different and </span>\n    <span class=\"token comment\">// will not attempt to find the differences.</span>\n    <span class=\"token comment\">// simply render the newVTree and mount it.</span>\n    <span class=\"token keyword\">return</span> <span class=\"token parameter\">$node</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> $newNode <span class=\"token operator\">=</span> <span class=\"token function\">render</span><span class=\"token punctuation\">(</span>newVTree<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      $node<span class=\"token punctuation\">.</span><span class=\"token function\">replaceWith</span><span class=\"token punctuation\">(</span>$newNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> $newNode<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">const</span> patchAttrs <span class=\"token operator\">=</span> <span class=\"token function\">diffAttrs</span><span class=\"token punctuation\">(</span>oldVTree<span class=\"token punctuation\">.</span>attrs<span class=\"token punctuation\">,</span> newVTree<span class=\"token punctuation\">.</span>attrs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> patchChildren <span class=\"token operator\">=</span> <span class=\"token function\">diffChildren</span><span class=\"token punctuation\">(</span>oldVTree<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">,</span> newVTree<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token parameter\">$node</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">patchAttrs</span><span class=\"token punctuation\">(</span>$node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">patchChildren</span><span class=\"token punctuation\">(</span>$node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> $node<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> diff<span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h2 id=\"make-our-app-more-complicated\"><a class=\"header-anchor\" href=\"#make-our-app-more-complicated\">#</a> Make our app more complicated</h2>\n<blockquote>\n<p><a href=\"https://codesandbox.io/s/mpmo2yy69\" target=\"_blank\" rel=\"noopener noreferrer\">https://codesandbox.io/s/mpmo2yy69<OutboundLink/></a></p>\n</blockquote>\n<p>Our current app doesn't really make full use of the power of our virtual DOM. To show how powerful our Virtual DOM is, let's make our app more complicated:</p>\n<p><strong>src/main.js</strong></p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">import</span> createElement <span class=\"token keyword\">from</span> <span class=\"token string\">'./vdom/createElement'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> render <span class=\"token keyword\">from</span> <span class=\"token string\">'./vdom/render'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> mount <span class=\"token keyword\">from</span> <span class=\"token string\">'./vdom/mount'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> diff <span class=\"token keyword\">from</span> <span class=\"token string\">'./vdom/diff'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">createVApp</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">count</span> <span class=\"token operator\">=></span> <span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  attrs<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    id<span class=\"token operator\">:</span> <span class=\"token string\">'app'</span><span class=\"token punctuation\">,</span>\n    dataCount<span class=\"token operator\">:</span> count<span class=\"token punctuation\">,</span> <span class=\"token comment\">// we use the count here</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  children<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token string\">'The current count is: '</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">String</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// and here</span>\n    <span class=\"token operator\">...</span>Array<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> length<span class=\"token operator\">:</span> count <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'img'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n      attrs<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        src<span class=\"token operator\">:</span> <span class=\"token string\">'https://media.giphy.com/media/cuPm4p4pClZVC/giphy.gif'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> vApp <span class=\"token operator\">=</span> <span class=\"token function\">createVApp</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> $app <span class=\"token operator\">=</span> <span class=\"token function\">render</span><span class=\"token punctuation\">(</span>vApp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> $rootEl <span class=\"token operator\">=</span> <span class=\"token function\">mount</span><span class=\"token punctuation\">(</span>$app<span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'app'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> n <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> vNewApp <span class=\"token operator\">=</span> <span class=\"token function\">createVApp</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> patch <span class=\"token operator\">=</span> <span class=\"token function\">diff</span><span class=\"token punctuation\">(</span>vApp<span class=\"token punctuation\">,</span> vNewApp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \n  <span class=\"token comment\">// we might replace the whole $rootEl,</span>\n  <span class=\"token comment\">// so we want the patch will return the new $rootEl</span>\n  $rootEl <span class=\"token operator\">=</span> <span class=\"token function\">patch</span><span class=\"token punctuation\">(</span>$rootEl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  vApp <span class=\"token operator\">=</span> vNewApp<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>Our app now will generate a random number <code>n</code> between 0 and 9 and display <code>n</code> cat photos on the page. If you go into the dev tools, you will see how we are &quot;intelligently&quot; inserting and removing <code>&lt;img&gt;</code> depending on <code>n</code>.</p>\n<h2 id=\"thank-you\"><a class=\"header-anchor\" href=\"#thank-you\">#</a> Thank you</h2>\n<p>If you read all the way up to here, I would like to thank you for taking the time to read the whole thing. It is a very very long read! Please leave a comment if you actually read the whole thing. Love you!</p>\n"}},"context":{}}