{"hash":"2c1314957fbc2c318f95c052b9aada4851d3dd08","data":{"post":{"title":"5 Tips for Live-Coding Talks","content":"<p>This year (2018) I have given 4 tech talks at different events.</p>\n<ol>\n<li>\n<p>05 July @ Vue.js Manchester Meetup: (my first ever tech talk! ðŸŽ‰ðŸŽ‰)\n&quot;Demonstrating <a href=\"https://aerotwist.com/blog/flip-your-animations/\" target=\"_blank\" rel=\"noopener noreferrer\">FLIP<OutboundLink/></a> and how Vue uses it&quot;\n<a href=\"https://www.pscp.tv/w/1OdKrpdzRWpJX?t=45m14s\" target=\"_blank\" rel=\"noopener noreferrer\">Watch video here<OutboundLink/></a>\n<img src=\"https://thepracticaldev.s3.amazonaws.com/i/4n022a6wtoa6f7dbqfxn.jpg\" alt=\"\"></p>\n</li>\n<li>\n<p>26 July @ Vue.js Hong Kong Meetup:\n&quot;Introduction to Vue.js&quot;\n<img src=\"https://thepracticaldev.s3.amazonaws.com/i/aw1gdbfh61kcw3xaouye.jpeg\" alt=\"\"></p>\n</li>\n<li>\n<p>21 September @ Vue.js London Conference:\n&quot;Demonstrating how to build a static website with VuePress&quot;\n<img src=\"https://thepracticaldev.s3.amazonaws.com/i/4d5cgrfpbndhfjc458mx.jpg\" alt=\"\"></p>\n</li>\n<li>\n<p>21 November @ Manchester Web Meetup:\n&quot;Building a Simple Virtual DOM from Scratch&quot;\n<a href=\"https://dev.to/ycmjason/building-a-simple-virtual-dom-from-scratch-3d05\" target=\"_blank\" rel=\"noopener noreferrer\">Read the follow-up article here<OutboundLink/></a>\n<a href=\"https://www.youtube.com/watch?v=85gJMUEcnkc\" target=\"_blank\" rel=\"noopener noreferrer\">Watch the video here<OutboundLink/></a>\n<img src=\"https://media.licdn.com/dms/image/C4D22AQEnXRkWz6vYJw/feedshare-shrink_8192/0?e=1544986800&amp;v=beta&amp;t=X29bK666UCczIp2ZWylsFFL1FwWPKOnf2Cn7IGe-K7k\" alt=\"\"></p>\n</li>\n</ol>\n<p>There is one thing in common in all these talks: <strong>I did live coding</strong>.</p>\n<h2 id=\"why-did-i-do-live-coding-in-all-the-talks-isn-t-that-risky\"><a class=\"header-anchor\" href=\"#why-did-i-do-live-coding-in-all-the-talks-isn-t-that-risky\">#</a> Why did I do live-coding in all the talks? Isn't that risky?</h2>\n<p>I am not sure. I felt that talking slides are boring; engaging with the audience with actual code seems to be much more fun. I just had the feeling that I could probably pull off a decent live-coding talk despite having no past experience. I guess it was just born with me! ðŸ˜‚</p>\n<p>I noticed that many people are scared of doing live-coding. This is why I decided to write down a few tips that I think is essential for a good live-coding talk.</p>\n<h2 id=\"tip-1-be-truly-enthusiastic-about-the-topic\"><a class=\"header-anchor\" href=\"#tip-1-be-truly-enthusiastic-about-the-topic\">#</a> Tip #1: Be truly enthusiastic about the topic</h2>\n<p>This does not only apply to live-coding talks. Talking about something you love brings you excitement; excitement gives you energy; and energy in general is what attracts the attention of the audience!</p>\n<p>If you are not &quot;truly&quot; enthusiastic about the topic, persuade yourself or try to fake it for at least the duration of your talk. Pretend everything you talk about is a new discovery. Pretend every &quot;small&quot; line of code you write, is a &quot;giant&quot; leap for mankind. Saying things like &quot;isn't it amazing/cool/awesome?&quot;, &quot;oh my godddd&quot; excitedly usually persuade the audience that you are truly enthusiastic about something.\n<em>(controversial; I seldom use the above trick except for my final year project presentation at UniversityðŸ˜‚ðŸ˜‚ðŸ˜‚.)</em></p>\n<p>However, to be able to fake enthusiasm, it requires a high level of acting skills. So if you are not good at acting, simply <strong>change the topic to something you love</strong>.</p>\n<h2 id=\"tip-2-make-yourself-comfortable-on-stage-by-delaying-the-talk\"><a class=\"header-anchor\" href=\"#tip-2-make-yourself-comfortable-on-stage-by-delaying-the-talk\">#</a> Tip #2: Make yourself comfortable on stage by delaying the talk</h2>\n<p>From my past experiences singing on stage, I have learned that making yourself comfortable on the stage will boost the performance a lot. I had a lot of experiences singing on stage. I sang in a few competitions when I was at high school. Then I joined a student acapella group in London performing songs in different events.</p>\n<p>There is one trick that I would do if I were nervous on the stage. I would change the position of the mic stand. Try to delay my performance by &quot;setting up&quot; the stage. It might look like that you were &quot;setting up&quot;, but the real purpose of this delay is for yourself to familiarise yourself with the stage; make yourself comfortable.</p>\n<p>You can invent some ways to delay the start of your talk. I find taking selfie to be the most natural and fun way to delay the talk.</p>\n<p>Here are some other ideas you can use:</p>\n<ul>\n<li>Taking selfies</li>\n<li>Play a 30 second video that is relevant to your talk</li>\n<li>Chat with the audience if the venue permits</li>\n<li>Go to a few <a href=\"https://theuselessweb.com/\" target=\"_blank\" rel=\"noopener noreferrer\">useless websites<OutboundLink/></a> and have a laugh with the audience</li>\n</ul>\n<p>##Â Tip #3: Start the live-coding with <code>mkdir your-topic</code></p>\n<p>I can't stress enough about the importance of starting the live-coding by creating an empty project directory! This can make the audience feel that they know what is happening and would start to follow your flow right from the start.</p>\n<p>Live-coding by filling in lines of some functions is not a good idea because nobody in the audience would know what the other parts of the app is doing.</p>\n<p>The following is the standard routine of how I would start my live-coding:</p>\n<!--beforebegin--><div class=\"language- extra-class\"><!--afterbegin--><pre v-pre class=\"language-text\"><code>&quot;So let&#39;s start the live coding by creating an EMPTY directory&quot;\n$ mkdir /tmp/amazing-meetup\n\n&quot;Let&#39;s go into our directory&quot;\n$ cd /tmp/amazing-meetup\n\n&quot;Now let&#39;s do some basic project setup by initiating git and npm&quot;\n$ git init &amp;&amp; npm init -y\n\n&quot;Now we got the pacakge.json and git directory setup&quot;\n$ ls -l\n.git/\npackage.json\n\n&quot;Let&#39;s do our initial commit now!&quot;\n$ git add -A\n$ git commit -am &#39;initial commit&#39; \n</code></pre>\n<!--beforeend--></div><!--afterend--><h2 id=\"tip-4-avoid-ide-features\"><a class=\"header-anchor\" href=\"#tip-4-avoid-ide-features\">#</a> Tip #4: Avoid IDE features</h2>\n<p>*This should not apply to languages like Java which is impossible to code in without an IDE.*ðŸ¤¢ðŸ¤¢ðŸ¤¢</p>\n<p>There might be some really cool tricks in your IDE that does a lot of things at once, please don't use them during the live-coding. Your audience might have a different setup and would be confused if things magically happened. You want your audience to flow with your code <strong>step by step</strong>.</p>\n<p>Here are some common IDE features you should avoid using:</p>\n<ul>\n<li>If your IDE create projects with whole bunch of files like <code>.git/</code>, <code>.gitignore</code>, <code>package.json</code>, <code>.eslintrc</code> etc., dont use that!</li>\n<li>If your IDE has shortcuts to extract lines of codes into a function/variable/constants, don't use that!</li>\n<li>If your IDE has shortcuts to run command in terminal, JUST RUN THE COMMAND IN THE TERMINAL!!!!</li>\n</ul>\n<p>The only IDE feature that I would recommend using is formatting/linting the code.</p>\n<p>If you really <strong>NEED</strong> to use a shortcut, make sure you explicitly talk about what shortcut you are applying before doing it. However, I don't think there is something that you couldn't do manually.</p>\n<p>P.S. Vim is my major editor. I am not a big fan of IDE.</p>\n<h2 id=\"tip-5-make-your-code-elegant\"><a class=\"header-anchor\" href=\"#tip-5-make-your-code-elegant\">#</a> Tip #5: Make your code elegant!</h2>\n<p>When you were preparing the code that you are going to live-code, put extra time into making the code elegant, clean and simple.</p>\n<blockquote>\n<p>If you can't explain it simply, you don't understand it well enough.</p>\n</blockquote>\n<p>The process of simplifying your code will help you in so many ways:</p>\n<ol>\n<li>Help you understand the problem better</li>\n<li>Help you to explain the code better</li>\n<li>Help your audience to understand easier</li>\n<li>Help you write better code in the future!</li>\n</ol>\n<p>Here are some tips for simplifying code:</p>\n<ol>\n<li>Try to keep the indentation level low. Ideally no more than 4 indentation level. Each indentation level means an extra complexity. So try to eliminate the indentation level. For example, you can use <a href=\"https://en.wikipedia.org/wiki/Guard_(computer_science)\" target=\"_blank\" rel=\"noopener noreferrer\">guard clauses<OutboundLink/></a> to eliminate the <code>else</code> block.</li>\n<li>Avoid <code>for-i-loop</code> i.e. <code>for (let i = 0; i &lt; length; i++)</code>. Use <code>for-of</code> loop or other higher level loops instead. Or if you really need the index, do <code>Array.prototype.forEach</code> and take the index as the second argument; this is preferable because we don't have to refer to our element with <code>arr[i]</code> but <code>x</code> directly. Use <code>for (const [k, v] of Object.entries(obj))</code> to loop through the keys and values of an object.</li>\n<li>Use pure functions more, avoid side effects. <a href=\"https://en.wikipedia.org/wiki/Pure_function\" target=\"_blank\" rel=\"noopener noreferrer\">Pure functions<OutboundLink/></a> are so much easier to reason about and I can guarantee that your audience could follow much better!</li>\n<li>Avoid outdated features. You want to advocate good code and modern features. E.g. in Javascript, advocate the use of <code>let</code> and <code>const</code>, stop using <code>var</code>!</li>\n</ol>\n<h2 id=\"thank-you\"><a class=\"header-anchor\" href=\"#thank-you\">#</a> Thank you</h2>\n<p>I hope my tips did help you for your next live-coding talk! Good luck and keep coding!</p>\n"}},"context":{}}